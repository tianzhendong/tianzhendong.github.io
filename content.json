{"meta":{"title":"TianZD","subtitle":"TianZDの主页","description":"个人主页 | 笔记本 | 杂记","author":"TianZD","url":"http://www.tianzd.cn","root":"/"},"pages":[{"title":"404","date":"2019-08-10T08:41:10.000Z","updated":"2022-05-23T00:28:05.274Z","comments":true,"path":"404.html","permalink":"http://www.tianzd.cn/404.html","excerpt":"","text":""},{"title":"about","date":"2019-10-24T16:00:00.000Z","updated":"2022-05-23T00:28:05.983Z","comments":true,"path":"about/index.html","permalink":"http://www.tianzd.cn/about/index.html","excerpt":"","text":""},{"title":"","date":"2022-05-23T00:28:09.418Z","updated":"2022-05-23T00:28:09.418Z","comments":true,"path":"google1xxxxxxx0.html","permalink":"http://www.tianzd.cn/google1xxxxxxx0.html","excerpt":"","text":""},{"title":"","date":"2022-05-23T00:28:09.394Z","updated":"2022-05-23T00:28:09.394Z","comments":true,"path":"baidu_verify_xxxxxxx.html","permalink":"http://www.tianzd.cn/baidu_verify_xxxxxxx.html","excerpt":"","text":""},{"title":"放松一下","date":"2019-08-10T08:41:10.000Z","updated":"2022-05-23T00:28:05.440Z","comments":true,"path":"List/index.html","permalink":"http://www.tianzd.cn/List/index.html","excerpt":"","text":"影音资源共享"},{"title":"archives","date":"2019-10-24T16:00:00.000Z","updated":"2022-05-23T00:28:05.988Z","comments":true,"path":"archives/index.html","permalink":"http://www.tianzd.cn/archives/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-10-24T16:00:00.000Z","updated":"2022-05-23T00:28:09.399Z","comments":true,"path":"categories/index.html","permalink":"http://www.tianzd.cn/categories/index.html","excerpt":"","text":""},{"title":"统计","date":"2020-10-31T02:11:28.000Z","updated":"2022-05-23T00:28:09.406Z","comments":true,"path":"census/index.html","permalink":"http://www.tianzd.cn/census/index.html","excerpt":"","text":""},{"title":"留言板","date":"2019-10-24T16:00:00.000Z","updated":"2022-05-23T00:28:09.411Z","comments":true,"path":"contact/index.html","permalink":"http://www.tianzd.cn/contact/index.html","excerpt":"","text":"畅所欲言 在这里可以留下你的足迹，欢迎在下方留言，欢迎交换友链，一起交流学习！ 个人链接博客名称: TianZDの主页 博客网址: http://tianzd.cn 博客介绍:"},{"title":"友链","date":"2019-07-19T08:42:10.000Z","updated":"2022-05-23T00:28:09.416Z","comments":true,"path":"friends/index.html","permalink":"http://www.tianzd.cn/friends/index.html","excerpt":"","text":""},{"title":"资源分享","date":"2019-07-19T08:40:27.000Z","updated":"2022-05-23T00:28:09.426Z","comments":true,"path":"resource/index.html","permalink":"http://www.tianzd.cn/resource/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-07-19T08:40:27.000Z","updated":"2022-05-23T00:28:09.432Z","comments":true,"path":"tags/index.html","permalink":"http://www.tianzd.cn/tags/index.html","excerpt":"","text":""},{"title":"视频","date":"2019-08-10T08:41:10.000Z","updated":"2022-05-23T00:28:05.448Z","comments":true,"path":"List/movies/index.html","permalink":"http://www.tianzd.cn/List/movies/index.html","excerpt":"","text":""},{"title":"相册","date":"2022-05-23T00:28:05.330Z","updated":"2022-05-23T00:28:05.330Z","comments":true,"path":"List/galleries/index.html","permalink":"http://www.tianzd.cn/List/galleries/index.html","excerpt":"","text":""},{"title":"听听音乐","date":"2019-07-19T08:40:27.000Z","updated":"2022-05-23T00:28:05.461Z","comments":true,"path":"List/tools/index.html","permalink":"http://www.tianzd.cn/List/tools/index.html","excerpt":"","text":""},{"title":"听听音乐","date":"2019-07-19T08:40:27.000Z","updated":"2022-05-23T00:28:05.454Z","comments":true,"path":"List/music/index.html","permalink":"http://www.tianzd.cn/List/music/index.html","excerpt":"","text":""},{"title":"乖巧小狗","date":"2022-05-23T00:28:05.339Z","updated":"2022-05-23T00:28:05.339Z","comments":true,"path":"List/galleries/乖巧小狗/index.html","permalink":"http://www.tianzd.cn/List/galleries/%E4%B9%96%E5%B7%A7%E5%B0%8F%E7%8B%97/index.html","excerpt":"","text":""},{"title":"二次元风","date":"2022-05-23T00:28:05.348Z","updated":"2022-05-23T00:28:05.348Z","comments":true,"path":"List/galleries/二次元风/index.html","permalink":"http://www.tianzd.cn/List/galleries/%E4%BA%8C%E6%AC%A1%E5%85%83%E9%A3%8E/index.html","excerpt":"","text":""},{"title":"动漫插画","date":"2022-05-23T00:28:05.364Z","updated":"2022-05-23T00:28:05.364Z","comments":true,"path":"List/galleries/动漫插画/index.html","permalink":"http://www.tianzd.cn/List/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/index.html","excerpt":"","text":""},{"title":"动漫人物","date":"2022-05-23T00:28:05.356Z","updated":"2022-05-23T00:28:05.356Z","comments":true,"path":"List/galleries/动漫人物/index.html","permalink":"http://www.tianzd.cn/List/galleries/%E5%8A%A8%E6%BC%AB%E4%BA%BA%E7%89%A9/index.html","excerpt":"","text":""},{"title":"呆萌猫咪","date":"2022-05-23T00:28:05.381Z","updated":"2022-05-23T00:28:05.381Z","comments":true,"path":"List/galleries/呆萌猫咪/index.html","permalink":"http://www.tianzd.cn/List/galleries/%E5%91%86%E8%90%8C%E7%8C%AB%E5%92%AA/index.html","excerpt":"","text":""},{"title":"动漫风景","date":"2022-05-23T00:28:05.373Z","updated":"2022-05-23T00:28:05.373Z","comments":true,"path":"List/galleries/动漫风景/index.html","permalink":"http://www.tianzd.cn/List/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/index.html","excerpt":"","text":""},{"title":"清新花卉","date":"2022-05-23T00:28:05.399Z","updated":"2022-05-23T00:28:05.399Z","comments":true,"path":"List/galleries/清新花卉/index.html","permalink":"http://www.tianzd.cn/List/galleries/%E6%B8%85%E6%96%B0%E8%8A%B1%E5%8D%89/index.html","excerpt":"","text":""},{"title":"城市风光","date":"2022-05-23T00:28:05.390Z","updated":"2022-05-23T00:28:05.390Z","comments":true,"path":"List/galleries/城市风光/index.html","permalink":"http://www.tianzd.cn/List/galleries/%E5%9F%8E%E5%B8%82%E9%A3%8E%E5%85%89/index.html","excerpt":"","text":""},{"title":"璀璨星空","date":"2022-05-23T00:28:05.415Z","updated":"2022-05-23T00:28:05.415Z","comments":true,"path":"List/galleries/璀璨星空/index.html","permalink":"http://www.tianzd.cn/List/galleries/%E7%92%80%E7%92%A8%E6%98%9F%E7%A9%BA/index.html","excerpt":"","text":""},{"title":"炫酷跑车","date":"2022-05-23T00:28:05.408Z","updated":"2022-05-23T00:28:05.408Z","comments":true,"path":"List/galleries/炫酷跑车/index.html","permalink":"http://www.tianzd.cn/List/galleries/%E7%82%AB%E9%85%B7%E8%B7%91%E8%BD%A6/index.html","excerpt":"","text":""},{"title":"甜美食品","date":"2022-05-23T00:28:05.424Z","updated":"2022-05-23T00:28:05.424Z","comments":true,"path":"List/galleries/甜美食品/index.html","permalink":"http://www.tianzd.cn/List/galleries/%E7%94%9C%E7%BE%8E%E9%A3%9F%E5%93%81/index.html","excerpt":"","text":""},{"title":"自然风景","date":"2022-05-23T00:28:05.434Z","updated":"2022-05-23T00:28:05.434Z","comments":true,"path":"List/galleries/自然风景/index.html","permalink":"http://www.tianzd.cn/List/galleries/%E8%87%AA%E7%84%B6%E9%A3%8E%E6%99%AF/index.html","excerpt":"","text":""}],"posts":[{"title":"Hello World","slug":"hello-world","date":"2022-05-23T00:28:05.914Z","updated":"2022-05-23T00:28:05.914Z","comments":true,"path":"posts/4a17b156.html","link":"","permalink":"http://www.tianzd.cn/posts/4a17b156.html","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"dll生成与使用","slug":"C_C++/dll生成与使用","date":"2022-05-23T00:28:05.787Z","updated":"2022-05-23T02:00:01.731Z","comments":true,"path":"posts/fbf11e59.html","link":"","permalink":"http://www.tianzd.cn/posts/fbf11e59.html","excerpt":"","text":"[toc] DLL生成与使用(Clion、Visual Studio、QT Creator)DLL概述本节内容来自博客 它们是一些独立的文件，其中包含能被可执行程序或其他dll调用来完成某项工作的函数，只有在其他模块调用dll中的函数时，dll才发挥作用。 在实际编程中，我们可以把完成某项功能的函数放在一个动态链接库里，然后提供给其他程序调用。像Windows API中所有的函数都包含在dll中，如Kernel32.dll, User32.dll, GDI32.dll等。那么dll究竟有什么好处呢？ 静态库和动态库静态库函数和数据被编译进一个二进制文件（扩展名通常为.lib） 在使用静态库的情况下，在编译链接可执行文件时，链接器从静态库中复制这些函数和数据，并把它们和应用程序的其他模块组合起来创建最终的可执行文件（.exe）。当发布产品时，只需要发布这个可执行文件，并不需要发布被使用的静态库。 动态库在使用动态库时，往往提供两个文件：一个引入库（.lib，非必须）和一个.dll文件。 这里的引入库和静态库文件虽然扩展名都是.lib，但是有着本质上的区别，对于一个动态链接库来说，其引入库文件包含该动态库导出的函数和变量的符号名，而.dll文件包含该动态库实际的函数和数据。 使用动态链接库的好处 可以使用多种编程语言编写：比如我们可以用VC++编写dll，然后在VB编写的程序中调用它。 增强产品功能：可以通过开发新的dll取代产品原有的dll，达到增强产品性能的目的。比如我们看到很多产品踢动了界面插件功能，允许用户动态地更换程序的界面，这就可以通过更换界面dll来实现。 提供二次开发的平台：用户可以单独利用dll调用其中实现的功能，来完成其他应用，实现二次开发。 节省内存：如果多个应用程序使用同一个dll，该dll的页面只需要存入内存一次，所有的应用程序都可以共享它的页面，从而节省内存。 Clion+msvc生成的dll可以在使用同一编译器的不同sdk之间相互调用，但是要注意导出的是x86还是amd64 生成DLL新建项目C++库-类型选择shared 新建文件右键项目，新建C/C++源文件（或者直接新建一个类），并勾选创建关联头 编写c++注意，类中的变量和函数只有public类型才可以被访问。 使用__declspec(dllexport)声明导出函数 使用extern “C” __declspec(dllexport)声明导出函数为c类型 DllDemo.h #ifndef DLLDEMO_DLLDEMO_H #define DLLDEMO_DLLDEMO_H #include &lt;string&gt; #include &lt;iostream&gt; using namespace std; //使用__declspec(dllexport)声明导出函数 __declspec(dllexport) void sayHello(); __declspec(dllexport) int myAdd(int a, int b); class __declspec(dllexport) Student{ public: void setName(string name); string getName(); void setAge(int age); int getAge(); private: string name; int age; }; #endif //DLLDEMO_DLLDEMO_H DllDemo.cpp #include \"DllDemo.h\" void sayHello(){ cout&lt;&lt;\"hello!\"&lt;&lt;endl; } int myAdd(int a, int b){ return a+b; } void Student::setName(string name) { this-&gt;name = name; } string Student::getName() { return this-&gt;name; } void Student::setAge(int age) { this-&gt;age = age; } int Student::getAge() { return this-&gt;age; } 构建在debug目录下生成了.dll、.lib文件，后续主要用到.dll、.lib和.h文件 测试测试工具目录： C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\bin win+r——cmd 进入上述目录 输入 VCVARS32.bat 然后进入dll文件所在目录 输入 dumpbin -exports Dll1.dll 使用dll新建项目 在项目根目录新建lib文件夹将上述生成的.dll .lib 和编写的.h文件复制到lib中 cmakelist.txt添加：cmake_minimum_required(VERSION 3.21) project(DllUser) set(CMAKE_CXX_STANDARD 14) # 包含文件夹 include_directories( src lib ) # 新增;指项目根目录下的lib目录 link_directories(lib) add_executable(${PROJECT_NAME} src/main.cpp) # 新增;指目标链接的dll文件 target_link_libraries(${PROJECT_NAME} DllDemo) 运行/调试配置： 调用 方法1：lib中需要dll、lib和h三个文件 添加头文件 调用函数 #include &lt;iostream&gt; //添加头文件 #include \"lib/DllDemo.h\" int main() { sayHello(); cout&lt;&lt;myAdd(1,2)&lt;&lt;endl; Student tian; tian.setName(\"TianZD\"); tian.setAge(18); cout&lt;&lt;\"tian'name:\"&lt;&lt;tian.getName()&lt;&lt;endl; cout&lt;&lt;\"tian'age:\"&lt;&lt;tian.getAge()&lt;&lt;endl; return 0; } 可以看到正确输出 方法2：lib中只需要dll文件 #include &lt;iostream&gt; #include &lt;string&gt; using namespace std; //#include \"lib/DllDemo.h\" __declspec(dllimport) void sayHello(); __declspec(dllimport) class Student{ private: string name; int age; public: void setName(string name); void setAge(int age); string getName(); int getAge(); }; int main() { sayHello(); Student tian; tian.setName(\"TianZD\"); tian.setAge(18); cout&lt;&lt;\"tian'name:\"&lt;&lt;tian.getName()&lt;&lt;endl; cout&lt;&lt;\"tian'age:\"&lt;&lt;tian.getAge()&lt;&lt;endl; return 0; } 多层调用DllDemo1使用上面的 新建DllDemo2 Dll文件将DllDemo1的dll、lib、h文件放入lib中编写DllDemo2.h和.cpp情况一：2的h中没有引入1的内容，cpp中引入#ifndef DLLDEMO2_DLLDEMO2_H #define DLLDEMO2_DLLDEMO2_H //#include \"DllDemo.h\" __declspec(dllexport) void sayHello2(); __declspec(dllexport) int myAdd2(int a, int b); //class __declspec(dllexport) Student2: Student{ //public: // void setAge2(int age); // int getAge2(); //private: // int age2; //}; #endif //DLLDEMO2_DLLDEMO2_H #include \"DllDemo2.h\" #include \"DllDemo.h\" #include &lt;iostream&gt; using namespace std; void sayHello2(){ cout&lt;&lt;\"hello2222\"&lt;&lt;endl; sayHello(); Student tian; tian.setName(\"dlldemo2\"); cout&lt;&lt;tian.getName()&lt;&lt;endl; } int myAdd2(int a, int b){ return myAdd(a,b); } // //void Student2::setAge2(int age) { // this-&gt;age2 = age; //} // //int Student2::getAge2() { // return this-&gt;age2; //} 情况二：2的h中引入了1的内容#ifndef DLLDEMO2_DLLDEMO2_H #define DLLDEMO2_DLLDEMO2_H #include \"DllDemo.h\" __declspec(dllexport) void sayHello2(); class __declspec(dllexport) Student2: Student{ public: void setAge2(int age); int getAge2(); private: int age2; }; #endif //DLLDEMO2_DLLDEMO2_H #include \"DllDemo2.h\" void sayHello2(){ cout&lt;&lt;\"hello2222\"&lt;&lt;endl; sayHello(); } void Student2::setAge2(int age) { this-&gt;age2 = age; } int Student2::getAge2() { return this-&gt;age2; } cmaklists.txtcmake_minimum_required(VERSION 3.21) project(DllDemo2) set(CMAKE_CXX_STANDARD 14) include_directories( src lib ) # 新增;指项目根目录下的lib目录 link_directories( lib ) add_library(${PROJECT_NAME} SHARED \"src/library.cpp\" \"src/DllDemo2.cpp\" \"src/DllDemo2.h\") # 新增;指目标链接的dll文件 target_link_libraries(${PROJECT_NAME} DllDemo ) 添加lib到编译器的环境变量中使用情况一：2的h中没有引入1的内容，cpp中引入了只需要将1的dll和2的三个文件放入lib中 添加lib环境变量 cmake cmake_minimum_required(VERSION 3.21) project(DllUser2) set(CMAKE_CXX_STANDARD 14) include_directories( src lib ) # 新增;指项目根目录下的lib目录 link_directories(lib) add_executable(${PROJECT_NAME} src/main.cpp) # 新增;指目标链接的dll文件 target_link_libraries(${PROJECT_NAME} #只需要dlldemo2 DllDemo2) 测试 #include &lt;iostream&gt; #include \"DllDemo2.h\" int main() { std::cout &lt;&lt; \"Hello, World!\" &lt;&lt; std::endl; sayHello2(); std::cout&lt;&lt;myAdd2(1,2); return 0; } 情况二：2的h中引入1将1和2的三个文件（dll、lib、h）均放入到lib中 添加lib目录环境变量 添加cmakelists.txt cmake_minimum_required(VERSION 3.21) project(DllUser2) set(CMAKE_CXX_STANDARD 14) include_directories( src lib ) # 新增;指项目根目录下的lib目录 link_directories(lib) add_executable(${PROJECT_NAME} src/main.cpp) # 新增;指目标链接的dll文件 target_link_libraries(${PROJECT_NAME} DllDemo DllDemo2) 调用 #include &lt;iostream&gt; #include \"DllDemo2.h\" int main() { std::cout &lt;&lt; \"Hello, World!\" &lt;&lt; std::endl; Student tian; tian.setAge(12); cout&lt;&lt;tian.getAge()&lt;&lt;endl; Student2 tian2; tian2.setAge2(123); cout&lt;&lt;tian2.getAge2()&lt;&lt;endl; sayHello2(); return 0; } Visual Studio + msvc（c++）参考博客 可以直接调用clion生成的dll 生成平台X86、X64要注意，要和要调用该DLL的平台保持一直 生成dll把 函数 声明放在 .h 中，函数定义放在 cpp 文件中。 新建项目选择具有导出项的DLL动态链接库 导出声明导出头文件 // 以c方式导出 extern \"C\" __declspec(dllexport) void hello(); // 以c++方式导出 __declspec(dllexport) void hello1(); //以.def方式导出 void hello2(); 源文件 #include \"pch.h\" #include \"framework.h\" #include \"Dll2.h\" #include &lt;iostream&gt; void hello() { std::cout &lt;&lt; \"hello\" &lt;&lt; std::endl; } void hello1() { std::cout &lt;&lt; \"hello11\" &lt;&lt; std::endl; } void hello2() { std::cout &lt;&lt; \"hello2\" &lt;&lt; std::endl; } 然后点击 “ 生成解决方案 ” ，就可以在工程目录的 debug 目录或者 release 目录下（这取决你生成的是debug版本还是release版本）生成了动态链接库的相关文件。第三方调用时关键的文件为 .lib文件 和 .dll文件 以及工程目录下的 .h头文件 。 模板定义方式导出在项目中定义.def 文件，该文件为模块导出文件 编写.def LIBRARY EXPORTS hello2 如果是vs平台，需要在连接器中添加.def文件，如果是通过上述方式添加的.def，会自动添加 然后点击 “ 生成解决方案 ” ，就可以在工程目录的 debug 目录或者 release 目录下（这取决你生成的是debug版本还是release版本）生成了动态链接库的相关文件。第三方调用时关键的文件为 .lib文件 和 .dll文件 以及工程目录下的 .h头文件 调用新建C++控制台应用将dll放在debug目录下，将h和lib放在可以找到的位置 .dll文件是程序运行需要载入的动态链接库，VS中调试时可以通过 项目-&gt;属性-&gt;调试-&gt;环境 栏目添加.dll文件的 path 而成功调试，但在独立运行.exe程序是须将.dll文件放到同一目录下。 ​ 因此建议直接将 .dll文件 放入debug目录下或release目录下。.h头文件 和 .lib库文件 可以随意放置，只要是能够通过路径找到即可，为了方便管理，建议建立文件夹，放置在项目目录下。 调用可以直接调用Clion生成的Dll，应该只与编译器有关（用的都是同一个版本的msvc） 直接添加引用#include &lt;iostream&gt; #include \"Dll2.h\"//通过相对路径或绝对路径添加头文件 #pragma comment (lib,\"Dll2.lib\") // 添加 lib 文件 int main() { std::cout &lt;&lt; \"Hello World!\\n\"; hello(); hello1(); hello2(); } 在解决方案管理面板中添加头文件和资源文件添加一个现有项头文件，在文件夹中找到第三方库的头文件( .h )，添加进新建立的项目。添加一个现有项资源文件，在文件夹中找到第三方库的库文件( .lib )，添加进新建立的项目。 #include &lt;iostream&gt; #include \"Dll2.h\"//通过相对路径或绝对路径添加头文件 //#pragma comment (lib,\"Dll2.lib\") // 添加 lib 文件 int main() { std::cout &lt;&lt; \"Hello World!\\n\"; hello(); hello1(); hello2(); } 在 项目属性 -&gt; 设置 中 添加 头文件 和 库文件 项目-&gt;属性-&gt;VC++目录-&gt;包含目录 中添加第三方库的 头文件； 库目录 下 添加 第三方库 的 库文件(.lib文件）。 项目-&gt;属性-&gt;链接器-&gt;输入-&gt;附加依赖项中输入 库文件名称。 直接在代码load动态库文件这种方法不需要 include .h文件，不需要添加 lib库 和 lib库路径， 引入 windows.h（必须） 在 main 函数写下列语句调用 dll ​ 因为 C++ 声明 的 动态链接库会发生 Name Mangling，导致 编译后的函数名字会发生变化，所以需要使用 工具 查看 编译编译后的 动态链接库 对应的函数名。 ​ 而 extern “C” 声明的 和 def 文件声明的，编译后的函数名不会发生变化，可以直接使用。 VS2019 自带的工具 dumpbin.exe 可以查看编译后的 动态链接库对应的 函数名。 打开命令行，输入命令 dumpbin -exports Dll2.dll 这里采用博客中的内容： 所以 addFunc 不能直接使用，只能用被 name Mangling 后的名字 ，这里 addFunc 编译后的名字是 ?addFunc@@YAHHH@Z #include &lt;iostream&gt; #include &lt;windows.h&gt; // 加、减、乘 都是 int 类型 typedef int(*lpFunc)(int a, int b); //后边为参数，前面为返回值 // 除法 是 double 类型 typedef double(*lpFuncD)(double a, double b); //后边为参数，前面为返回值 int main() { std::cout &lt;&lt; \"Hello World!\\n\"; HMODULE hModule; hModule = LoadLibrary(L\"CPPDLL.dll\"); //调用DLL lpFunc lpfunc = NULL; // GetProcAddress为获取该函数的地址 // \"?addFunc@@YAHHH@Z\" 这个就是 C++ Name Mangling后的 addFunc 的函数名 lpfunc = (lpFunc)GetProcAddress(hModule, \"?addFunc@@YAHHH@Z\"); std::cout &lt;&lt; lpfunc(1, 2) &lt;&lt; std::endl; /* 使用 C extern 和 def 文件定义的动态链接库，函数名不会发生变化 */ lpfunc = (lpFunc)GetProcAddress(hModule, \"subFunc\"); std::cout &lt;&lt; lpfunc(3, 4) &lt;&lt; std::endl; lpfunc = (lpFunc)GetProcAddress(hModule, \"mulFunc\"); std::cout &lt;&lt; lpfunc(5, 6) &lt;&lt; std::endl; lpFuncD lpfuncd = NULL; lpfuncd = (lpFuncD)GetProcAddress(hModule, \"divFunc\"); std::cout &lt;&lt; lpfuncd(7, 8) &lt;&lt; std::endl; //释放 FreeLibrary(hModule); } 使用lib和dll文件 把 CPPDLL.dll 文件放到 debug 目录下， 然后在项目中引入 CPPDLL.lib 文件。 链接器 -&gt; 输入 -&gt; 附加依赖项 -&gt; 编辑 #include &lt;iostream&gt; // addFunc 是使用 C++ 方式声明的， _declspec(dllimport) int addFunc(int a, int b); //subFunc 是 使用 extern \"C\" 声明的 extern \"C\" _declspec(dllimport) int subFunc(int a, int b); // mulFunc 和 divFunc 是 使用 def 声明的 _declspec(dllimport) int mulFunc(int a, int b); _declspec(dllimport) double divFunc(double a, double b); int main() { std::cout &lt;&lt; \"Hello World!\\n\"; std::cout &lt;&lt; addFunc(1, 2) &lt;&lt; std::endl; std::cout &lt;&lt; subFunc(3, 4) &lt;&lt; std::endl; std::cout &lt;&lt; mulFunc(5, 6) &lt;&lt; std::endl; std::cout &lt;&lt; divFunc(7, 8) &lt;&lt; std::endl; return 0; } 还可以结合 第一种方法，使用 #pragma comment (lib,”./CPPDLL.lib”) //添加 lib 文件 这样就不用 手动设置 添加 lib 文件了 多层调用只需要把多层的dll都放进去即可 VisualStudio （c#）调用c++的DLL 个人一般只用c#调用c++代码 可以直接调用Clion生成的DLL，但是只能调用extern “C”声明的导出函数 注意：一般msvc版本是X86的，要注意，使用x64位的netCore无法调用，这里我用的是netFramwork 生成DLL使用Clion，也可以使用visualStudion，生成方法同上，这里只列出代码部分 第一层：#ifndef DLLDEMO_DLLDEMO_H #define DLLDEMO_DLLDEMO_H #include &lt;string&gt; #include &lt;iostream&gt; using namespace std; extern \"C\" __declspec(dllexport) void sayHello(); __declspec(dllexport) void sayHello1(); extern \"C\" __declspec(dllexport) int myAdd(int a, int b); class Student{ public: string name; void studentHello(); }; #endif //DLLDEMO_DLLDEMO_H #include \"DllDemo.h\" void Student::studentHello() { cout&lt;&lt;\"studentHello\"&lt;&lt;endl; } void sayHello(){ Student s; s.studentHello(); cout&lt;&lt;\"hello1111111!\"&lt;&lt;endl; } void sayHello1(){ Student s; s.studentHello(); cout&lt;&lt;\"hello1111111!\"&lt;&lt;endl; } int myAdd(int a, int b){ return a+b; } 第二层将1的三个文件放入lib 配置编译器lib环境变量 添加cmakelists.txt 编写调用代码 // // Created by 12038 on 2022/4/15. // #ifndef DLLDEMO2_DLLDEMO2_H #define DLLDEMO2_DLLDEMO2_H //#include \"DllDemo.h\" extern \"C\" __declspec(dllexport) void sayHello2(); extern \"C\" __declspec(dllexport) int myAdd2(int a, int b); class Student2{ public: void student2Hello(); }; #endif //DLLDEMO2_DLLDEMO2_H // // Created by 12038 on 2022/4/15. // #include \"DllDemo2.h\" #include \"DllDemo.h\" #include &lt;iostream&gt; using namespace std; void sayHello2(){ cout&lt;&lt;\"hello2222\"&lt;&lt;endl; sayHello(); Student2 tian; tian.student2Hello(); } int myAdd2(int a, int b){ return myAdd(a,b); } // void Student2::student2Hello() { cout&lt;&lt;\"student22222Hello\"&lt;&lt;endl; } visual studio调用建立netframework项目 将两个dll文件放到debug目录下 调用添加using System.Runtime.InteropServices; 导入库文件[DllImport(\"DllDemo2.dll\")] 导入函数private static extern void sayHello2(); using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; //添加相应的库 using System.Runtime.InteropServices; namespace ConsoleApp3 { class Program { //调用 [DllImport(\"DllDemo2.dll\")] private static extern void sayHello2(); [DllImport(\"DllDemo2.dll\")] private static extern int myAdd2(int a, int b); static void Main(string[] args) { //使用 sayHello2(); Console.WriteLine(myAdd2(1, 2)); } } } QT Creator + msvc生成dll 新建dll项目 生成后的结构如下（这里用的的DllDemo1）： 其中_global.h自带两个系统默认导出宏 #ifndef DLLDEMO1_GLOBAL_H #define DLLDEMO1_GLOBAL_H #include &lt;QtCore/qglobal.h&gt; #if defined(DLLDEMO1_LIBRARY) # define DLLDEMO1_EXPORT Q_DECL_EXPORT #else # define DLLDEMO1_EXPORT Q_DECL_IMPORT #endif #endif // DLLDEMO1_GLOBAL_H 编写导出函数 头文件： #ifndef DLLDEMO1_H #define DLLDEMO1_H #include \"DllDemo1_global.h\" class DLLDEMO1_EXPORT DllDemo1 { public: DllDemo1(); }; //声明导出的函数sayhello DLLDEMO1_EXPORT void sayHello(); //声明导出的函数myadd DLLDEMO1_EXPORT int myAdd(int a, int b); #endif // DLLDEMO1_H 源文件： #include \"dlldemo1.h\" #include &lt;iostream&gt; DllDemo1::DllDemo1() { } //实现函数 void sayHello(){ std::cout&lt;&lt;\"hello, dll in qt\"&lt;&lt;std::endl; } int myadd(int a, int b){ std::cout&lt;&lt;\"myadd\"&lt;&lt;std::endl; return a+b; } 构建后会在debug目录下生成dll和lib文件，同时可能需要用到.h和_global.h文件 调用新建c++控制台项目 构建项目，生成debug目录将dll文件放到debug目录 将lib文件放到工程目录下 右键项目，添加lib库 选择外部库 选择刚才的lib文件，取消平台下的linux，mac，取消为debug版本添加d作为哦后缀，点击完成代码就被添加进call.pro 调用 方法1： #include &lt;QCoreApplication&gt; #include&lt;iostream&gt; using namespace std; __declspec(dllimport) void sayHello(); __declspec(dllimport) int myAdd(int a, int b); int main(int argc, char *argv[]) { QCoreApplication a(argc, argv); cout&lt;&lt;myAdd(1,2)&lt;&lt;endl; sayHello(); return a.exec(); } 方法2 将.h和_global.h放入到项目目录下 右键项目，添加两个.h文件 引入头文件 #include &lt;QCoreApplication&gt; #include&lt;iostream&gt; //引入头文件 #include \"./dlldemo1.h\" using namespace std; //__declspec(dllimport) void sayHello(); //__declspec(dllimport) int myAdd(int a, int b); int main(int argc, char *argv[]) { QCoreApplication a(argc, argv); cout&lt;&lt;myAdd(1,2)&lt;&lt;endl; sayHello(); return a.exec(); }","categories":[{"name":"C++","slug":"C","permalink":"http://www.tianzd.cn/categories/C/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://www.tianzd.cn/tags/C/"},{"name":"DLL","slug":"DLL","permalink":"http://www.tianzd.cn/tags/DLL/"}],"author":"TianZD"},{"title":"Anaconda","slug":"python/Anaconda","date":"2022-04-29T06:10:50.000Z","updated":"2022-05-23T01:51:54.263Z","comments":true,"path":"posts/5c8e05d2.html","link":"","permalink":"http://www.tianzd.cn/posts/5c8e05d2.html","excerpt":"","text":"Anaconda介绍Anaconda指的是一个开源的Python发行版本，其包含了conda、Python等180多个科学包及其依赖项。 因为包含了大量的科学包，Anaconda 的下载文件比较大（约 531 MB），如果只需要某些包，或者需要节省带宽或存储空间，也可以使用Miniconda这个较小的发行版（仅包含conda和 Python）。 Conda是一个开源的包、环境管理器，可以用于在同一个机器上安装不同版本的软件包及其依赖，并能够在不同的环境之间切换 Anaconda包括Conda、Python以及一大堆安装好的工具包，比如：numpy、pandas等 Miniconda包括Conda、Python 清华Anaconda 镜像使用帮助 下载、安装下载清华镜像 官网 安装下载后一路NEXT 第一个选项是添加环境变量，默认是没有勾选的，请务必勾选上，如果这里不勾选，后续安装完成后想要自行添加环境变量会非常麻烦。勾选完后点击 Install 安装。如果忘了勾选可以卸载重装。 安装完成后在开始菜单会多出一个快捷方式，也就是Anaconda下的4个子程序： 其中Anaconda Prompt 就是我们的cmd Anaconda Navigator是管理器，可以在里面通过图像化界面管理虚拟环境 键入python --version 回车，查看当前安装的python版本我们也可以通过键入python 回车进入python解释器 安装完成后，在终端输入conda -V注意v为大写，可以查看conda版本 更改源清华Anaconda 镜像使用帮助 各系统都可以通过修改用户目录下的 .condarc 文件 Windows 用户无法直接创建名为 .condarc 的文件，可先执行 conda config --set show_channel_urls yes 生成该文件之后再修改。 channels: - defaults show_channel_urls: true default_channels: - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2 custom_channels: conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud pytorch-lts: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud 即可添加 Anaconda Python 免费仓库。 运行 conda clean -i 清除索引缓存，保证用的是镜像站提供的索引。 运行 conda create -n myenv numpy 测试一下吧。 虚拟环境Anaconda创建、激活、退出、删除虚拟环境 方法1：通过Anaconda Navigator应用图形化方式管理，安装anaconda后自带 方法2：通过命令行 创建虚拟环境使用 conda create -n your_env_name python=X.X（2.7、3.6等） anaconda 命令创建python版本为X.X、名字为your_env_name的虚拟环境。your_env_name文件可以在Anaconda安装目录envs文件下找到。 指定python版本为2.7，注意至少需要指定python版本或者要安装的包， 在不指定python版本时，自动安装最新python版本。 conda create -n env_name python=2.7 # 同时安装必要的包 conda create -n env_name numpy matplotlib python=2.7 激活虚拟环境使用如下命令即可激活创建的虚拟环境 Linux: source activate your_env_name(虚拟环境名称) Windows: activate your_env_name(虚拟环境名称) 退出虚拟环境使用如下命令即可退出创建的虚拟环境 Linux: source deactivate your_env_name(虚拟环境名称) Windows:deactivate env_name，也可以使用activate root切回root环境 虚拟环境管理删除环境： 使用命令conda remove -n your_env_name(虚拟环境名称) --all， 即可删除。 删除虚拟环境中的包： 使用命令conda remove --name $your_env_name $package_name（包名） 即可。 常用命令 conda list：查看安装了哪些包。 conda install package_name(包名)：安装包 conda env list 或 conda info -e：查看当前存在哪些虚拟环境 conda update conda：检查更新当前conda","categories":[{"name":"python","slug":"python","permalink":"http://www.tianzd.cn/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://www.tianzd.cn/tags/python/"},{"name":"conda","slug":"conda","permalink":"http://www.tianzd.cn/tags/conda/"}],"author":"TianZD"},{"title":"通讯数据格式转换","slug":"通讯/通讯数据格式转换","date":"2022-04-29T05:47:36.000Z","updated":"2022-05-23T00:28:05.979Z","comments":true,"path":"posts/fffca2d8.html","link":"","permalink":"http://www.tianzd.cn/posts/fffca2d8.html","excerpt":"","text":"[toc] 通讯数据格式转换（float/real-word-byte)前言在上位机和下位机进行通讯的时候，通常要进行数据转换为字节（8位）或者word（16位）进行传输 modubusTCP在传输时，通过读写保持性寄存器位进行数据传输，一个保持性寄存器占有2个byte，16个bite，传输的数据常为float型（4个byte，32位），需要进行转换 浮点数的表示通常采用IEEE 754浮点数标准，可以参考文章IEEE754标准的浮点数存储格式 IEEE754转换：在线转换网址 数据在内存中的存储格式大端模式大端模式是指数据的高字节保存在内存的低地址单元中，而数据的低字节保存在内存的高地址单元中，这样的存储模式有点类似于把数据当作字符串顺序处理：地址由小向大增加，而数据从高位往低位放；这和我们的阅读习惯一致。 小端模式小端模式是指数据的高字节保存在内存的高地址单元中，而数据的低字节保存在内存的低地址单元中。 转换其中float-byte、byte-float代码转自CSDN文章：float型数据与4字节之间的转换,作者tutu-hu float-byte（32位浮点数转4个8位）2进制，与运算，左移运算 /*将浮点数f转化为4个字节数据存放在byte[4]中*/ unsigned char* Float_to_Byte(float f) { float float_data = 0; unsigned long longdata = 0; longdata = *(unsigned long*)&amp;f; //注意，会丢失精度 byte[0] = (longdata &amp; 0xFF000000) &gt;&gt; 24; byte[1] = (longdata &amp; 0x00FF0000) &gt;&gt; 16; byte[2] = (longdata &amp; 0x0000FF00) &gt;&gt; 8; byte[3] = (longdata &amp; 0x000000FF); return byte; } float-word（32位浮点数转2个16位）unsigned int* Float_to_word(float f) { unsigned long longdata = 0; longdata = *(unsigned long*)&amp;f; //注意，会丢失精度 word[0] = (longdata &amp; 0xFFFF0000) &gt;&gt; 16; word[1] = (longdata &amp; 0x0000FFFF); return word; } byte-float（4个8位转1个32位浮点数）方法1把四个字节存储好之后，再把这个存储区域的首地址强制转换为float指针类型，这样就可以提取出这个浮点数了。 /*将4个字节数据byte[4]转化为浮点数存放在*f中*/ float Byte_to_Float(unsigned char *p) { float float_data=0; unsigned long longdata = 0; longdata = (*p&lt;&lt; 24) + (*(p+1) &lt;&lt; 16) + (*(p + 2) &lt;&lt; 8) + (*(p + 3) &lt;&lt; 0); float_data = *(float*)&amp;longdata; return float_data; } 方法2把四个字节存储好之后，再把这个存储区域的首地址强制转换为float指针类型，这样就可以提取出这个浮点数了。 这个和方法1类似 /** *作用：把u8四字节数组转为float *note：低地址放float的低字节 **/ float U8_to_Float(u8* str) { float data; data = *((float*)str); return data; } 方法3定义一个float变量，然后定义u8类型指针数组指向float变量地址，Modbus协议解析的时候只管向地址指向的存储单元填充数据，需要用浮点数的时候直接拿过来用就可以了。 #include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #include &lt;string.h&gt; int main(void) { float freq; char recv[4] = {0x41, 0xbc, 0x00, 0x00}; //接收到的数据，高字节到低字节排列 char *Modbus_HoldReg[4]; //定义保持寄存器指针数组 //第一步：指针初始化 Modbus_HoldReg[0] = ((char*)(&amp;freq)) + 3; //低地址指向高位 Modbus_HoldReg[1] = ((char*)(&amp;freq)) + 2; Modbus_HoldReg[2] = ((char*)(&amp;freq)) + 1; Modbus_HoldReg[3] = ((char*)(&amp;freq)) + 0; //高地址指向低位 //第二步：给地址指定的内存单元赋值（对应Modbus协议中的数据解析） *Modbus_HoldReg[0] = recv[0]; *Modbus_HoldReg[1] = recv[1]; *Modbus_HoldReg[2] = recv[2]; *Modbus_HoldReg[3] = recv[3]; printf(\"%f\\r\\n\", freq); return 0; } word-float（2个16位合成1个32位浮点数）float Byte_to_Float(unsigned char *p) { float float_data=0; unsigned long longdata = 0; longdata = (*p&lt;&lt; 16) + (*(p+1) &lt;&lt; 0); float_data = *(float*)&amp;longdata; return float_data; } byte-word（2个8位合成1个16位）两个8位数如何转化为16位数？ int data = (a&lt;&lt;8) &amp; b; char a;//高位 char b;//低位 .... int data = (a&lt;&lt;8)&amp;0xFF00; data &amp;= b;","categories":[{"name":"通信","slug":"通信","permalink":"http://www.tianzd.cn/categories/%E9%80%9A%E4%BF%A1/"}],"tags":[{"name":"数据格式","slug":"数据格式","permalink":"http://www.tianzd.cn/tags/%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F/"},{"name":"modbus","slug":"modbus","permalink":"http://www.tianzd.cn/tags/modbus/"}],"author":"TianZD"},{"title":"Frp-转载","slug":"效率/Frp","date":"2022-04-27T04:31:14.000Z","updated":"2022-05-23T01:27:54.757Z","comments":true,"path":"posts/c65a4228.html","link":"","permalink":"http://www.tianzd.cn/posts/c65a4228.html","excerpt":"","text":"frp服务端和客户端配置转载自blog.csdn.net 服务器端配置frp的服务器端，一般命名为frps，配置文件是frps.ini，首先需要下载frp，可以在(https://github.com/fatedier/frp/releases)下载最新版的frp。（此处以 frp_0.32.0_linux_amd64 为例）. Wget https://github.com/fatedier/frp/releases/download/v0.32.0/frp_0.32.0_linux_amd64.tar.gz tar -zxvf frp_0.32.0_linux_amd64.tar.gz cd frp_0.32.0_linux_amd64 ​ 进入frp_0.32.0_linux_amd64文件夹，打开frps.ini进行服务器端配置 vim frps.ini ​ 如果出现无法写入的错误请使用 sudo vim frps.ini ​ 在frps.ini文件中配置如下： [common] bind_port = 7000 #绑定的端口，需要与客户端中 server_port 参数保持一致 vhost_http_port = 80 #虚拟主机运行在本机的端口，如果 vps 有服务占用了端口，应当更换 dashboard_port = dashboard_port_number #frp 后台服务页面的端口，如果设置 8000，便可通过 http://yourip:8000 来访问 frps 的后台页面 dashboard_user = dashboard_user_name #：frp 后台服务页面的管理员用户名 dashboard_pwd = dashboard_pwd_value #frp 后台服务页面的管理员密码 privilege_token = privilege_token_value #自定义值，必须与客户端中的 privilege_token 保持一致 ​ 配置完成之后，便可以通过如下命令启动 frps： ./frps -c ./frps.ini #启动服务端frp ​ 客户端配置客户端一般命名为frpc，配置文件是frpc.ini，首先需要下载frp，可以在https://github.com/fatedier/frp/releases下载最新版的frp。（此处以 frp_0.32.0_linux_amd64 为例） wget https://github.com/fatedier/frp/releases/download/v0.32.0/frp_0.32.0_linux_amd64.tar.gz tar -zxvf frp_0.32.0_linux_amd64.tar.gz cd frp_0.32.0_linux_amd64 ​ 进入frp_0.32.0_linux_amd64文件夹，打开frps.ini进行服务器端配置 vim frpc.ini #无法写入添加sudo权限 ​ 在frpc.ini文件中配置如下： [common] server_addr = your_server_ip #服务器端的 ip server_port = 7000 #服务器端的端口，即 bind_port privilege_token = privilege_token_value #同服务器端的 privilege_token 保持一致 [ssh] type = tcp local_ip = 127.0.0.1 local_port = 22 remote_port = remote_port_number #远程端口，即 ssh 连接树莓派时的端口 ​ 配置完成之后，便可以通过如下命令启动 frps： ./frpc -c ./frpc.ini #启动客户端frp ​ frp自启动配置服务端自启动： sudo vim /lib/systemd/system/frps.service #进入frps.service文件编写 #写入下列命令 [Unit] Description=fraps service After=network.target network-online.target syslog.target Wants=network.target network-online.target [Service] Type=simple ExecStart=/your/path/frps -c /your/path/frps.ini #启动服务的命令（此处写你的frps的实际安装目录） #路径为实际安装路径，比如frp在usr用户的frp下，应该配置为ExecStart=/home/usr/frp/frps -c /home/usr/frp/frps.ini [Install] WantedBy=multi-user.target ​ 然后启动 frps sudo systemctl start frps ​ 再打开自启动 sudo systemctl enable frps ​ 此外 sudo systemctl restart frps #重启 sudo systemctl stop frps #停止 sudo systemctl status frps #查看应用日志 ​ 客户端自启动配置类似。将frps改为frpc 参考链接https://www.jianshu.com/p/a921e85280ed-https://blog.csdn.net/sinat\\_29963957/article/details/83591264?depth\\_1-utm\\_source=distribute.pc\\_relevant.none-task&amp;utm\\_source=distribute.pc\\_relevant.none-task 查看原网页: blog.csdn.net FRP+远程桌面查看原网页: www.cnblogs.com 服务端系统：CentOS Linux release 7.6.1810 (Core) 1.服务端配置： 2.在被远程的电脑安装客户端： 下载：https://files.cnblogs.com/files/chenjw-note/frp\\_0.21.0\\_windows\\_386.zip 解压： 修改配置文件 本地端口：3389 使用命令行运行程序： 进入对应程序目录：cd C:\\Users\\chenjianwen\\Desktop\\frp_远程桌面使用流程-芒果\\frp_0.21.0_windows_386 执行命令：.\\frpc.exe -c frpc.ini 看到如图则成功安装，这个黑色框框不能关掉了哦 开启远程设置： 以上，仅执行一次部署完即可 ================================================== 使用家里电脑的远程桌面工具连接公司办公电脑 开始连接远程桌面，输入框输入：118.89.23.85:上面根据工号定义的端口 查看原网页: www.cnblogs.com","categories":[{"name":"折腾","slug":"折腾","permalink":"http://www.tianzd.cn/categories/%E6%8A%98%E8%85%BE/"}],"tags":[{"name":"frp","slug":"frp","permalink":"http://www.tianzd.cn/tags/frp/"},{"name":"内网穿透","slug":"内网穿透","permalink":"http://www.tianzd.cn/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"}],"author":"TianZD"},{"title":"Docsify","slug":"blog/Docsify","date":"2022-04-27T04:23:53.000Z","updated":"2022-05-23T01:43:44.824Z","comments":true,"path":"posts/2eeac462.html","link":"","permalink":"http://www.tianzd.cn/posts/2eeac462.html","excerpt":"","text":"Docsify[toc] codesheep微信文章 框架对比其实做这种网站，完全不用自己手写，现成的工具太多了，这地方随便举几个典型例子吧。 Hexo这是一个大家用得非常广泛的静态博客，两年前咱们这里就已经演示过它的使用以及部署上线。 工具地址：https://hexo.io VuePress一款基于Vue框架驱动的静态网站生成器，比较符合用于知识文档网站的建站需求，现在用的小伙伴也很多。 工具地址：https://vuepress.vuejs.org/ docsifydocsify同样是一个很好用的知识文档网站生成框架，轻量简便，而且无需构建，写完内容就可以直接发布，界面干净又卫生。 工具地址：https://docsify.js.org/ 无需构建，写完文档直接发布 容易使用并且轻量 (压缩后 ~21kB) 智能的全文搜索 提供多套主题 丰富的 API 支持 Emoji 兼容 IE11 支持服务端渲染 SSR (示例) GitbookGitBook也是一个可以用来制作知识库文档以及精美电子书网站的工具框架，不少技术电子书文档都是用它来做的。 工具地址：https://github.com/GitbookIO/gitbook 前置环境docsify唯一需要的一个前置工具就是npm工具 查看是否安装及版本 如果没有的话，直接在本地电脑上安装一个node.js环境就可以了。 不管是macOS还是Windows系统，直接去https://nodejs.org/官网下载个安装包就可以了，直接下一步下一步即可，安装完成之后会包含npm工具。 安装Docsifynpm install -g docsify-cli docsify -v //查看版本 开始新建项目文件夹接下来我们从零开始来新建一个本地的项目文件夹。 可以在任何地方新建，名字也可以随便命名，这里取名为repository，代表的意思是知识仓库 初始化网站进入到上述新建的项目文件夹repository，执行如下命令即可初始化网站，非常简单： docsify init 初始化成功之后，命令行里也会输出对应初始化成功的打印信息。 启动本地预览docsify serve 我们会发现docsify会帮我们在localhost:3000启动一个知识库网站。 然后在浏览器打开http://localhost:3000即可看见网站效果。 当然，这时候的页面看起来非常简陋，几乎什么也没有。 接下来我们来看一看网站的文件结构，这个工具是如何做到这么快就可以启动一个网站的呢。 项目结构上文执行完docsify init命令成功初始化网站后，docsify会在项目文件夹里自动帮我们生成以下两个文件： index.html：网站主入口文件和配置文件 README.md：网站内容文件。支持Markdown格式，docsify可以帮我们把该Markdown源文件渲染成网页进行展示。 所以我们只需要直接编辑生成的这个README.md文件就能更新网站的内容。 coverpage：封面 navbar：导航栏 sidebar：侧边栏 logo.ico：网页图标 配置https://blog.csdn.net/Lonelyooacz/article/details/103490545 页面和URL路径如果需要创建多个页面，或者需要多级路由的网站，在docsify里能很容易实现。 打比方说，你的目录结构如下： . └── repository ├── README.md ├── test.md └── content ├── README.md └── bigdata.md 那么对应的页面访问URL地址将是: repository/README.md =&gt; http://127.0.0.1:3000/ repository/test.md =&gt; http://127.0.0.1:3000/test repository/content/README.md =&gt; http://127.0.0.1:3000/content/ repository/content/bigdata.md =&gt; http://127.0.0.1:3000/content/bigdata 所以只需要在项目目录里添加其他.md文件，或者目录层级，即可形成多页面网站，非常简单易懂！ 修改主题docsify提供了多套主题可供使用。 直接修改index.html中引入的CSS文件即可修改网站主题。 目前提供有好几套主题可供选择： &lt;link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/docsify/themes/vue.css\"&gt; &lt;link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/docsify/themes/buble.css\"&gt; &lt;link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/docsify/themes/dark.css\"&gt; &lt;link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/docsify/themes/pure.css\"&gt; &lt;link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/docsify/themes/dolphin.css\"&gt; 设置封面像上文刚刚这样创建出来的网站其实是没有封面的，如果需要添加封面，可以通过在index.html中设置coverpage参数为true来实现： coverpage: true 这样既可开启封面功能。 封面功能开启之后，我们可以直接去项目文件夹里创建一个_coverpage.md文件来制作封面内容。 比如我们这地方，添加了_coverpage.md文件之后，在里面写上如下几段文字： ![logo](https://cdn.jsdelivr.net/gh/justacoder99/r2coding@master/img/r2coding_logo_cover.7hb2s8l3eqk0.png) - 本站取名为r2coding，即Road To Coding，意为编程自学之路，是自学编程以来所用资源和分享内容的大聚合。旨在为编程自学者提供一系列清晰的学习路线、靠谱的资源、高效的工具、和务实的文章，方便自己也方便他人。**网站内容会持续保持更新，欢迎收藏品鉴！** ## 记住，一定要善用 `Ctrl+F` 哦！ [**联系作者**](https://github.com/rd2coding/Road2Coding) [**开启阅读**](README.md) 在网页上渲染之后，即可看到如下效果： 所以其操作是非常简单的。 设置导航栏像上文刚刚这样创建出来的网站顶部右上角其实是没有导航栏的，如果需要添加导航栏，可以通过在index.html中设置loadNavbar参数来开启： loadNavbar: true 导航栏功能开启之后，我们可以直接去项目文件夹里创建一个_navbar.md文件来制作导航栏菜单内容。 比如我们这地方，添加了_navbar.md导航栏之后的效果大致如下： 设置章鱼猫可以通过在index.html中设置repo参数来开启网站右上角的章鱼猫链接的小图标功能 repo: 'https://github.com/rd2coding/Road2Coding' 设置完成后的效果如下，还是很萌的，鼠标移到上面，小尾巴还能摇一摇。 设置logo可以通过在index.html中设置name参数或者logo参数来开启网站侧边栏左上角的标题或者logo显示功能： name: 'Road To Coding', logo: 'https://cdn.jsdelivr.net/gh/justacoder99/r2coding@master/img/r2coding_logo_sidebar.1na4hwjnopq8.png' 比如这地方设置了logo图片之后，效果大致如下： 设置tabs在index.html中添加 docsify-tabs 插件。 &lt;!-- docsify (latest v4.x.x)--&gt; &lt;script src=\"https://cdn.jsdelivr.net/npm/docsify@4\"&gt;&lt;/script&gt; &lt;!-- docsify-tabs (latest v1.x.x) --&gt; &lt;script src=\"https://cdn.jsdelivr.net/npm/docsify-tabs@1\"&gt;&lt;/script&gt; 查看选项部分并根据需要进行配置。 window.$docsify = { // ... tabs: { persist : true, // default sync : true, // default theme : 'classic', // default tabComments: true, // default tabHeadings: true // default } }; 查看自定义部分并根据需要设置主题属性。 &lt;style&gt; :root { --docsifytabs-border-color: #ededed; --docsifytabs-tab-highlight-color: purple; } &lt;/style&gt; 使用HTML 注释定义选项卡集tabs:start。tabs:end HTML 注释用于标记选项卡集的开始和结束。当 Markdown 在您的 docsify 站点（例如 GitHub、GitLab 等）之外呈现为 HTML 时，使用 HTML 注释可防止显示与选项卡相关的标记。 &lt;!-- tabs:start --&gt; ... &lt;!-- tabs:end --&gt; 使用标题 + 粗体标记定义选项卡集中的选项卡。 标题文本将用作选项卡标签，所有后续内容将与该选项卡相关联，直到下一个选项卡或tab:end评论的开始。使用标题 + 粗体标记允许使用标准标记定义选项卡，并确保选项卡内容在您的 docsify 站点（例如 GitHub、GitLab 等）之外呈现时显示带有标题。 &lt;!-- tabs:start --&gt; #### **English** Hello! #### **French** Bonjour! #### **Italian** Ciao! &lt;!-- tabs:end --&gt; EnglishHello! FrenchBonjour! ItalianCiao! 效果： alert插件https://github.com/fzankl/docsify-plugin-flexible-alerts 首页html文件&lt;!DOCTYPE html&gt; &lt;html lang=\"zh-CN\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Tian's Blog&lt;/title&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" /&gt; &lt;meta name=\"description\" content=\"Description\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\"&gt; &lt;!-- &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, minimum-scale=1.0\"&gt; --&gt; &lt;link rel=\"icon\" href=\"./5.ico\"&gt; &lt;link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/docsify/lib/themes/vue.css\"&gt; &lt;!-- 谷歌站点收录 --&gt; &lt;meta name=\"google-site-verification\" content=\"qTFCf1hJ275saQ7H1kin5t2DVpznBKAj0Gi50XMOVMo\" /&gt; &lt;!-- 百度站点收录--&gt; &lt;meta name=\"baidu-site-verification\" content=\"SZyWUIzWiU\" /&gt; &lt;!-- gittalk --&gt; &lt;link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/gitalk/dist/gitalk.css\"&gt; &lt;!-- 支持 LaTex 语言 --&gt; &lt;link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css\" /&gt; &lt;!-- &lt;link rel=\"stylesheet\" href=\"https://wugenqiang.js.org/src/css/iconfont.css\"&gt; --&gt; &lt;!-- &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/wugenqiang/NoteBook@master/plugin/custom.css\"&gt; --&gt; &lt;!-- alert --&gt; &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/wugenqiang/NoteBook@master/plugin/sweetalert.min.css\" type='text/css' media='all' /&gt; &lt;!-- 友链 --&gt; &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/wugenqiang/NoteBook@master/plugin/css/friends-link.css\"&gt; &lt;!-- 自定义特色样式：by myself --&gt; &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/wugenqiang/NoteBook@master/plugin/css/me.css\"&gt; &lt;/head&gt; &lt;style&gt; @import 'vuetian.css'; /* @import 'base.user.css'; */ /*加重描述strong*/ .markdown-section strong { color: rgb(19, 192, 235); } .app-nav{ position: fixed; margin: 0; padding: 10px 40px 10px 0px;/*上、右、下、左*/ width: calc(100% - 325px); /* background-color: #fff; */ height: 55px; color: rgb(22, 168, 107); /* border-bottom: 1px solid #eee; */ } /*.github-corner{ position: absolute; z-index: 999999; top: 0; }*/ .markdown-section code { border-radius: 2px; font-family: \"Helvetica Neue\",Helvetica,\"Hiragino Sans GB\",\"Microsoft YaHei\",Arial,sans-serif; font-size: 16px !important; margin: 0 2px; padding: 3px 5px; white-space: nowrap; border: 1px solid #282c34; color: rgb(184, 101, 208); } .markdown-section &gt; div &gt; img, .markdown-section pre { box-shadow: 2px 2px 20px 6px rgb(255, 255, 255) !important; } .markdown-section a:not(:hover) { text-decoration: none; } /*侧边栏*/ .sidebar { padding-top: 6px; width: 200px; } /* aside.sidebar ul li { margin: 0; position: relative; } aside.sidebar ul li ul { margin: 6px 0; } aside.sidebar ul li p { padding-left: 22px; font-size: 18px; font-weight: normal; } aside.sidebar ul li a { line-height: 35px; font-size: 14px; padding: 3px 0 3px 22px; } aside.sidebar ul li.active &gt; a { font-size: 16px !important; } */ /* aside.sidebar ul li.active &gt; a:before { content: '' !important; position: absolute !important; margin: 0 !important; width: 10px !important; height: 10px !important; top: 15px !important; left: 0px !important; border-radius: 50% !important; background-color: #fed24a !important; box-shadow: 0 0 0 3px rgba(254, 210, 74, 0.4) !important; } */ /* 一级标题 */ /* h1 span{ display:inline-block; background: rgb(66, 185, 131); color:#ffffff; padding: 10px 16px; border-radius:5px; box-shadow: 1px 1px 3px black; } */ /*代码块背景*/ p code{ background-color: rgb(255, 255, 255) !important; } .markdown-section p.tip, .markdown-section tr:nth-child(1n) { font-size: 16px !important; } .markdown-section h1 { margin: 3rem 0 2rem 0; } .markdown-section h2 { margin: 2rem 0 1rem; } img, pre { border-radius: 5px; } /*添加代码块复制按钮样式*/ .docsify-copy-code-button { background: #00a1d6 !important; color: #FFFFFF !important; font-size: 13px !important; } ::after{ color: #9da2fd !important; font-size: 13px !important; } .markdown-section&gt;p { font-size: 16px !important; } /*代码块头部图标 start*/ .markdown-section pre:before { content: ''; display: block; background: url(./assets/Docsify/202202280805295.png); height: 30px; background-size: 40px; background-repeat: no-repeat; background-color: #1C1C1C; background-position: 10px 10px; } /*代码块头部图标 end*/ .markdown-section pre&gt;code { color: #c0c3c1 !important; font-family: 'Inconsolata', consolas,\"PingFang SC\", \"Microsoft YaHei\", monospace !important; background-color: #212121 !important; // #accfff #282c34 font-size: 15px !important; white-space: pre !important; line-height: 1.5 !important; -moz-tab-size: 4 !important; -o-tab-size: 4 !important; tab-size: 4 !important; } ol, ul, li{ line-height: 27px !important; font-size: 16px !important; } @media (min-width:600px) { .markdown-section pre&gt;code { font-size: 15px !important; letter-spacing: 1.1px !important; } } @media (max-width:600px) { .markdown-section pre&gt;code { padding-top: 5px; padding-bottom: 5px; padding-left: 16px !important; } pre:after { content: \"\" !important; } } section.cover h1 { margin: 0; } pre { background-color: #212121 !important; } @media (min-width:600px) { pre code { /*box-shadow: 2px 1px 20px 2px #aaa;*/ /*border-radius: 10px !important;*/ padding-left: 20px !important; } } @media (max-width:600px) { pre { padding-left: 3px !important; padding-right: 3px !important; margin-left: -20px !important; margin-right: -20px !important; box-shadow: 0px 0px 20px 0px #f7f7f7 !important; } /*代码块复制按钮默认隐藏*/ .docsify-copy-code-button { display: none; } .advertisement{ display: none; } } .markdown-section pre { padding-left: 0 !important; padding-right: 0px !important; } .markdown-section { margin: 0 3.2% !important; } /*修改代码块代码颜色显示*/ .token.directive.keyword{ color: #4faee2 !important; } .token.keyword{ color: #c678dd !important; } .token.comment{ color: #737c8b !important; } .token.tag{ color: #a589ad !important; } .token.attr-name{ color: #de916c !important; } .token.attr-value{ color: #4faee2 !important; } .token.macro.property{ color: #4faee2 !important; } .token.function{ color: #e6b456 !important; } .token.string{ color: #98b755 !important; } .token.punctuation{ color: #c0c3c1 !important; } .token.number{ color:#c0c3c1 !important; } a.section-link{ font-size: .9rem !important; } .advertisement { position: fixed; right: 20px; top: 100px; width: 110px; box-shadow: -1px 0 2px 0px #c5ebda; padding: 10px; z-index: 99; background-color: #fff; text-align: center; } .advertisement p, h4 { margin: 0; padding: 0; } .advertisement .Tencent_code h4 { font-size: 15px; color: #25a46a; margin-bottom: 10px; } /*滚动条样式 start*/ /* 滚动条宽度 */ ::-webkit-scrollbar{width:5px;} /* 滚动条颜色 */ ::-webkit-scrollbar-thumb{ background: #33a9dc; background-image: linear-gradient(#6ecd56, #33a9dc); border-radius: 2em; } &lt;/style&gt; &lt;body&gt; &lt;!-- 读条显示 --&gt; &lt;div id=\"app\"&gt;🏃‍🏃‍🏃‍💨 加载中...&lt;/div&gt; &lt;!-- 右侧显示公众号 --&gt; &lt;!-- &lt;div class=\"aside_container\"&gt; &lt;div class=\"advertisement\"&gt; &lt;div class=\"Tencent_code\"&gt; &lt;h4&gt;关注作者公众号&lt;/h4&gt; &lt;p style=\"font-size: 12px;\"&gt;万千小伙伴陪你一起学&lt;/p&gt; &lt;img src=\"https://cdn.jsdelivr.net/gh/wugenqiang/PictureBed/images01/20200808182633.jpg\" alt=\"EnjoyToShare\" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; --&gt; &lt;!-- gittalk --&gt; &lt;!-- &lt;script src=\"//cdn.jsdelivr.net/npm/docsify-edit-on-github\"&gt;&lt;/script&gt; &lt;script src=\"//cdn.jsdelivr.net/npm/gitalk/dist/gitalk.min.js\"&gt;&lt;/script&gt; --&gt; &lt;script&gt; window.$docsify = { // 项目名称 name: 'Tian', logo: './assets/Docsify/202202281213460.png', // 仓库地址，点击右上角的Github章鱼猫头像会跳转到此地址 repo: 'https://gitee.com/tianzhendong/NoteBooks', // 侧边栏支持，默认加载的是项目根目录下的_sidebar.md文件 // loadSidebar: true, // 导航栏支持，默认加载的是项目根目录下的_navbar.md文件 coverpage: true, // 最大支持渲染的标题层级 maxLevel: 4, // 自定义侧边栏后默认不会再生成目录，设置生成目录的最大层级（建议配置为2-4） subMaxLevel: 3, //主题颜色 // themeColor: '#33a9dc', auto2top: true, //当路线改变时,滚动到屏幕的顶部 loadNavbar: true,//_navbar.md如果为真，则从_navbar.md文件加载navbar ，否则从指定的路径加载 mergeNavbar: true,//Navbar将在小屏幕上与侧边栏合并 executeScript: true,//执行页面上的脚本。只解析第一个脚本标记（演示）。如果存在Vue，则默认开 //subMaxLevel: 6,//在自定义边栏中添加目录（TOC) externalLinkTarget: '_blank', //外链打开方式：_blank表示在新标签页中打开 // onlyCover: true, //设置后封面不显示导航栏 topMargin: 60,//调整top //executeScript: true,//执行页面上的脚本，仅解析第一个脚本标签 search: { paths: 'auto', placeholder: '🔍 搜索', noData: '😒 找不到结果', // Headline depth, 1 - 6 depth: 6, maxAge: 86400000, // 过期时间，单位毫秒，默认一天 },//添加搜索框 // plugins: [ // EditOnGithubPlugin.create(\"https://gitee.com/tianzhendong\") // ] // 谷歌分析 SEO ga: 'UA-164658031-2', // footer: { // copy: '&lt;div class = \"over\" &gt;完结&lt;/div&gt;&lt;br/&gt;&lt;span&gt;我能想到最浪漫的事，就是我喝咖啡你付钱~😆😏 ❤️ 打赏地址：&lt;a href=\"https://wugenqiang.js.org/sponsor/\" target=\"_blank\"&gt;https://wugenqiang.js.org/sponsor/&lt;/a&gt;&lt;/span&gt;&lt;iframe src=\"https://wugenqiang.js.org/sponsor/\" style=\"overflow-x:hidden;overflow-y:hidden; min-height:240px; width:100%;\" frameborder=\"0\" scrolling=\"no\"&gt;&lt;/iframe&gt;&lt;br/&gt;&lt;span id=\"sitetime\"&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Copyright &amp;copy; 2019 - 至今&lt;/span&gt;', // auth: ' &lt;a href=\"https://wugenqiang.github.io/\" target=\"_blank\"&gt;🏷️ EnjoyToShare Blog&lt;/a&gt; &lt;span&gt; 一个人可以走的很快，但一群人才能走的更远！&lt;/span&gt;', // pre: '&lt;hr/&gt;', // style: 'text-align: left;', // },//添加页脚 markdown: { renderer: { code: function(code, lang, base=null) { if (lang === \"dot\") { return ( '&lt;div class=\"viz\"&gt;'+ Viz(code, \"SVG\")+'&lt;/div&gt;' ); } var pdf_renderer = function(code, lang, verify) { function unique_id_generator(){ function rand_gen(){ return Math.floor((Math.random()+1) * 65536).toString(16).substring(1); } return rand_gen() + rand_gen() + '-' + rand_gen() + '-' + rand_gen() + '-' + rand_gen() + '-' + rand_gen() + rand_gen() + rand_gen(); } if(lang &amp;&amp; !lang.localeCompare('pdf', 'en', {sensitivity: 'base'})){ if(verify){ return true; }else{ var divId = \"markdown_code_pdf_container_\" + unique_id_generator().toString(); var container_list = new Array(); if(localStorage.getItem('pdf_container_list')){ container_list = JSON.parse(localStorage.getItem('pdf_container_list')); } container_list.push({\"pdf_location\": code, \"div_id\": divId}); localStorage.setItem('pdf_container_list', JSON.stringify(container_list)); return ( '&lt;div style=\"margin-top:'+ PDF_MARGIN_TOP +'; margin-bottom:'+ PDF_MARGIN_BOTTOM +';\" id=\"'+ divId +'\"&gt;' + '&lt;a href=\"'+ code + '\"&gt; Link &lt;/a&gt; to ' + code + '&lt;/div&gt;' ); } } return false; } if(pdf_renderer(code, lang, true)){ return pdf_renderer(code, lang, false); } //return this.origin.code.apply(this, arguments); return (base ? base : this.origin.code.apply(this, arguments)); } } }, } &lt;/script&gt; &lt;script src=\"//unpkg.com/docsify-count/dist/countable.js\"&gt;&lt;/script&gt; &lt;!-- &lt;script src=\"//unpkg.com/docsify\"&gt;&lt;/script&gt; --&gt; &lt;script src=\"//cdn.jsdelivr.net/npm/docsify/lib/docsify.min.js\" data-ga=\"UUA-176075611-1\"&gt;&lt;/script&gt; &lt;script src=\"//cdn.jsdelivr.net/npm/docsify/lib/plugins/emoji.min.js\"&gt;&lt;/script&gt; &lt;script src=\"//cdn.jsdelivr.net/npm/docsify/lib/plugins/search.min.js\"&gt;&lt;/script&gt; &lt;script src=\"//cdn.jsdelivr.net/npm/docsify-pagination/dist/docsify-pagination.min.js\"&gt;&lt;/script&gt; &lt;script src=\"//cdn.jsdelivr.net/npm/docsify/lib/plugins/zoom-image.min.js\"&gt;&lt;/script&gt; &lt;!-- &lt;script src=\"//cdn.jsdelivr.net/npm/docsify/lib/plugins/gitalk.min.js\"&gt;&lt;/script&gt; --&gt; &lt;script src=\"//cdn.jsdelivr.net/npm/docsify-pagination/dist/docsify-pagination.min.js\"&gt;&lt;/script&gt; &lt;!-- 代码块样式优化--&gt; &lt;script src=\"https://cdn.jsdelivr.net/gh/wugenqiang/NoteBook@master/plugin/prism-c.js\"&gt;&lt;/script&gt; &lt;!--&lt;script src=\"//unpkg.com/prismjs/components/prism-cpp.js\"&gt;&lt;/script&gt;--&gt; &lt;script src=\"https://cdn.jsdelivr.net/gh/wugenqiang/NoteBook@master/plugin/prism-cpp.js\"&gt;&lt;/script&gt; &lt;script src=\"https://cdn.jsdelivr.net/gh/wugenqiang/NoteBook@master/plugin/prism-css.js\"&gt;&lt;/script&gt; &lt;script src=\"https://cdn.jsdelivr.net/gh/wugenqiang/NoteBook@master/plugin/prism-docker.js\"&gt;&lt;/script&gt; &lt;script src=\"https://cdn.jsdelivr.net/gh/wugenqiang/NoteBook@master/plugin/prism-java.js\"&gt;&lt;/script&gt; &lt;script src=\"https://cdn.jsdelivr.net/gh/wugenqiang/NoteBook@master/plugin/prism-javascript.js\"&gt;&lt;/script&gt; &lt;script src=\"https://cdn.jsdelivr.net/gh/wugenqiang/NoteBook@master/plugin/prism-json.js\"&gt;&lt;/script&gt; &lt;script src=\"https://cdn.jsdelivr.net/gh/wugenqiang/NoteBook@master/plugin/prism-latex.js\"&gt;&lt;/script&gt; &lt;script src=\"https://cdn.jsdelivr.net/gh/wugenqiang/NoteBook@master/plugin/prism-sql.js\"&gt;&lt;/script&gt; &lt;script src=\"https://cdn.jsdelivr.net/gh/wugenqiang/NoteBook@master/plugin/prism-markdown.js\"&gt;&lt;/script&gt; &lt;script src=\"https://cdn.jsdelivr.net/gh/wugenqiang/NoteBook@master/plugin/prism-bash.min.js\"&gt;&lt;/script&gt; &lt;script src=\"https://cdn.jsdelivr.net/gh/wugenqiang/NoteBook@master/plugin/prism-php.min.js\"&gt;&lt;/script&gt; &lt;script src=\"https://cdn.jsdelivr.net/gh/wugenqiang/NoteBook@master/plugin/prism-scala.min.js\"&gt;&lt;/script&gt; &lt;script src=\"https://cdn.jsdelivr.net/gh/wugenqiang/NoteBook@master/plugin/prism-nginx.min.js\"&gt;&lt;/script&gt; &lt;script src=\"https://cdn.jsdelivr.net/gh/wugenqiang/NoteBook@master/plugin/prism-json.min.js\"&gt;&lt;/script&gt; &lt;script src=\"https://cdn.jsdelivr.net/gh/wugenqiang/NoteBook@master/plugin/prism-markdown.min.js\"&gt;&lt;/script&gt; &lt;script src=\"https://cdn.jsdelivr.net/gh/wugenqiang/NoteBook@master/plugin/prism-python.js\"&gt;&lt;/script&gt; &lt;script src=\"https://cdn.jsdelivr.net/gh/wugenqiang/NoteBook@master/plugin/js/prism-yaml.js\"&gt;&lt;/script&gt; &lt;script src=\"https://cdn.jsdelivr.net/gh/wugenqiang/StaticRepo/src/js/prism-go.js\"&gt;&lt;/script&gt; &lt;script src=\"https://cdn.jsdelivr.net/gh/wugenqiang/StaticRepo/src/js/prism-matlab.js\"&gt;&lt;/script&gt; &lt;!-- mouse click --&gt; &lt;script src=\"https://cdn.jsdelivr.net/gh/wugenqiang/NoteBook@master/plugin/click_heart.js\"&gt;&lt;/script&gt; &lt;!-- 添加页脚 --&gt; &lt;script src=\"https://cdn.jsdelivr.net/gh/wugenqiang/NoteBook@master/plugin/docsify-footer-enh.min.js\"&gt;&lt;/script&gt; &lt;!-- 复制提醒 --&gt; &lt;script src=\"https://cdn.jsdelivr.net/gh/wugenqiang/NoteBook@master/plugin/sweetalert.min.js\"&gt;&lt;/script&gt; &lt;script&gt; document.body.oncopy = function () { swal(\"复制成功\", \"若要转载或引用请务必保留原文链接，并申明来源。如果你觉得本仓库不错，那就来 GitHub 给个 Star 吧 😊 - by TianZD\", \"success\"); }; &lt;/script&gt; &lt;!-- &lt;script src=\"//cdn.jsdelivr.net/npm/docsify-katex@latest/dist/docsify-katex.js\"&gt;&lt;/script&gt; --&gt; &lt;script src=\"//cdn.jsdelivr.net/npm/docsify/lib/plugins/ga.min.js\"&gt;&lt;/script&gt; &lt;!-- 复制代码--&gt; &lt;script src=\"https://cdn.jsdelivr.net/gh/wugenqiang/NoteBook@master/plugin/docsify-copy-code.min.js\"&gt;&lt;/script&gt; &lt;!-- 回到顶部功能 --&gt; &lt;script src=\"https://cdn.jsdelivr.net/gh/wugenqiang/NoteBook@master/plugin/jquery.js\"&gt;&lt;/script&gt; &lt;script src=\"https://cdn.jsdelivr.net/gh/wugenqiang/NoteBook@master/plugin/jquery.goup.js\"&gt;&lt;/script&gt; &lt;script type=\"text/javascript\"&gt; $(document).ready(function () { $.goup({ trigger: 100, bottomOffset: 52, locationOffset: 25, //title: 'TOP', titleAsText: true }); }); &lt;/script&gt; &lt;script src=\"https://cdn.jsdelivr.net/npm/docsify-tabs@1\"&gt;&lt;/script&gt; &lt;!-- 支持 DOT 语言 --&gt; &lt;script src=\"https://cdn.jsdelivr.net/gh/wugenqiang/NoteBook@master/plugin/viz.js\"&gt;&lt;/script&gt; &lt;!-- 支持 LaTex 语言 --&gt; &lt;script src=\"//cdn.jsdelivr.net/npm/docsify-katex@latest/dist/docsify-katex.js\"&gt;&lt;/script&gt; &lt;!-- 添加 PDF 页面展示功能 --&gt; &lt;!-- PDFObject.js is a required dependency of this plugin --&gt; &lt;!--&lt;script src=\"//cdnjs.cloudflare.com/ajax/libs/pdfobject/2.1.1/pdfobject.min.js\"&gt;&lt;/script&gt;--&gt; &lt;script src=\"https://cdn.jsdelivr.net/gh/wugenqiang/NoteBook@master/plugin/pdfobject.min.js\"&gt;&lt;/script&gt; &lt;!-- This is the source code of the pdf embed plugin --&gt; &lt;script src=\"https://cdn.jsdelivr.net/gh/wugenqiang/NoteBook@master/plugin/docsify-pdf-embed.js\"&gt;&lt;/script&gt; &lt;!-- alert插件 --&gt; &lt;script src=\"https://unpkg.com/docsify-plugin-flexible-alerts\"&gt;&lt;/script&gt; &lt;!-- 添加网站运行时间统计 --&gt; &lt;script language=javascript&gt; function siteTime() { window.setTimeout(\"siteTime()\", 1000); var seconds = 1000; var minutes = seconds * 60; var hours = minutes * 60; var days = hours * 24; var years = days * 365; var today = new Date(); var todayYear = today.getFullYear(); var todayMonth = today.getMonth() + 1; var todayDate = today.getDate(); var todayHour = today.getHours(); var todayMinute = today.getMinutes(); var todaySecond = today.getSeconds(); /* Date.UTC() -- 返回date对象距世界标准时间(UTC)1970年1月1日午夜之间的毫秒数(时间戳) year - 作为date对象的年份，为4位年份值 month - 0-11之间的整数，做为date对象的月份 day - 1-31之间的整数，做为date对象的天数 hours - 0(午夜24点)-23之间的整数，做为date对象的小时数 minutes - 0-59之间的整数，做为date对象的分钟数 seconds - 0-59之间的整数，做为date对象的秒数 microseconds - 0-999之间的整数，做为date对象的毫秒数 */ var t1 = Date.UTC(2019, 06, 21, 22, 22, 22); //北京时间2019-06-21 22:22:22 //计划考研的日子，6月20日毕业典礼结束后，人生需要继续努力，加油，看到这句话的朋友们！ var t2 = Date.UTC(todayYear, todayMonth, todayDate, todayHour, todayMinute, todaySecond); var diff = t2 - t1; var diffYears = Math.floor(diff / years); var diffDays = Math.floor((diff / days) - diffYears * 365); var diffHours = Math.floor((diff - (diffYears * 365 + diffDays) * days) / hours); var diffMinutes = Math.floor((diff - (diffYears * 365 + diffDays) * days - diffHours * hours) / minutes); var diffSeconds = Math.floor((diff - (diffYears * 365 + diffDays) * days - diffHours * hours - diffMinutes * minutes) / seconds); document.getElementById(\"sitetime\").innerHTML = \" 本站已安全运行 \" + diffYears + \" 年 \" + diffDays + \" 天 \" + diffHours + \" 小时 \" + diffMinutes + \" 分 \" + diffSeconds + \" 秒 \"; } siteTime(); &lt;/script&gt; &lt;script src=\"https://eqcn.ajz.miesnfu.com/wp-content/plugins/wp-3d-pony/live2dw/lib/L2Dwidget.min.js\"&gt;&lt;/script&gt; &lt;script&gt; L2Dwidget.init({ \"model\": { //jsonpath控制显示那个小萝莉模型， //(切换模型需要改动) //https://unpkg.com/live2d-widget-model-模型名称/assets/模型名称.model.json // jsonPath: \"https://unpkg.com/live2d-widget-model-koharu@1.0.5/assets/koharu.model.json\", // jsonPath: \"https://unpkg.com/live2d-widget-model-hijiki/assets/hijiki.model.json\", // jsonPath: \"https://unpkg.com/live2d-widget-model-tororo/assets/tororo.model.json\", jsonPath: \"https://unpkg.com/live2d-widget-model-wanko/assets/wanko.model.json\", \"scale\": 1 }, \"display\": { \"position\": \"right\", //看板娘的表现位置 \"width\": 70, //小萝莉的宽度 \"height\": 140, //小萝莉的高度 \"hOffset\": 35, \"vOffset\": -20 }, \"mobile\": { \"show\": true, \"scale\": 0.5 }, \"react\": { \"opacityDefault\": 0.7, \"opacityOnHover\": 0.2 } }); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; Nginx部署准备对于这类网站的部署，我们当然可以部署到GitHub Pages服务或者Gitee Pages服务上去 也直接将其部署到云服务器上去。 安装服务器软件这里选用Nginx这个Web服务器来驱动网站，因为Nginx服务器除了本身非常轻量，稳定，不耗资源之外，而且性能还好，还特别能扛并发。 首先准备一个nginx-1.17.10.tar.gz的安装包，我们将其直接上传到云服务器的root⽬录下 在/usr/local/下创建nginx⽂件夹并进⼊ cd /usr/local/ mkdir nginx cd nginx 将Nginx安装包解压到/usr/local/nginx中即可 tar zxvf /root/nginx-1.17.10.tar.gz -C ./ 解压完之后，在/usr/local/nginx⽬录中会出现⼀个nginx-1.17.10的目录 预先安装额外的几个依赖 yum -y install pcre-devel yum -y install openssl openssl-devel 接下来编译安装Nginx即可 cd nginx-1.17.10 ./configure make &amp;&amp; make install 安装完成后， Nginx的可执行文件位置位于 /usr/local/nginx/sbin/nginx 其配置⽂件则位于： /usr/local/nginx/conf/nginx.conf 启动Nginx 直接执⾏如下命令即可 /usr/local/nginx/sbin/nginx 如果想停⽌Nginx服务，可执⾏： /usr/local/nginx/sbin/nginx -s stop 如果修改了配置⽂件后想重新加载Nginx，可执⾏： /usr/local/nginx/sbin/nginx -s reload 上传网站到云服务器比如，我们可以直接在/usr/local/nginx/目录中创建一个www文件夹，用于存放我们本地的项目文件夹。 然后我们可以直接将本地的项目文件夹repository上传到www目录里即可 Nginx配置和访问接下来我们打开路径/usr/local/nginx/conf/nginx.conf下的Nginx服务器配置文件，修改其中最关键的一个location /下的root目录配置为项目文件夹的路径即可 location / { root /usr/local/nginx/www/repository; index index.html index.htm; } 然后我们直接在浏览器中访问云服务器的公网IP，就可以访问该知识库网站了： 最后再将域名和这个IP一绑定，就OK了 nginx服务器添加密码访问通过htpasswd命令生成用户名及对应密码数据库文件htpasswd -c /htpasswd/passwd.db test 说明：此命令是使用Crypt算法生产一个加密文件passwd.db。 test是用户名 /htpasswd/passwd.db 是密码文件存放地址 htpasswd apache的生产密码的插件 把 passwd.db文件设置为777权限 chmod 777 文件名 nginx域名配置文件修改location / { root html; index index.html index.htm index index.jpg; auth_basic 'Restricted'; # 认证名称，随意填写 auth_basic_user_file /htpasswd/passwd.db; # 认证的密码文件，需要生产。 } 如果没有安装apache，可以安装如下软件，就有htpasswd这个命令了 yum -y install httpd-tools yum -y install httpd #安装httpd which htpasswd #查看是否安装 rpm -qf /usr/bin/htpasswd #查看是否安装 htpasswd -cb /usr/local/nginx/conf/htpasswd ceshi 123789 #生成密码文件 chmod 400 /usr/local/nginx/conf/htpasswd #为了安全设置文件权限 然后重启nginx服务器即可实现nginx服务器添加密码 #3、检查语法并重启 /usr/local/nginx/sbin/nginx -t /usr/local/nginx/sbin/nginx -s reload 定时git pull和重启nginx前提：www中已经设置了git仓库，这里为www下的NoteBooks文件夹 拉取最新代码 git pull 在NoteBooks下新建自动化脚本 vim 111gitpull.sh 输入： #!/bin/bash cd /usr/local/nginx/www/NoteBooks git pull /usr/local/nginx/sbin/nginx -s reload 设置自动启动，这里每30分钟拉取一次 进入root用户 编辑cron脚本 crontab -e 输入： */30 * * * * /usr/local/nginx/www/NoteBooks/111gitpull.sh 将服务自动启动 vim /etc/rc.d/rc.local 这个脚本的末尾加上： /sbin/service crond start 配置Gittalk第一步：创建OAuth Application这里假设你的github仓库已经创建好，docsify也已经安装使用中。申请授权地址点击这里几个参数解释： Application name：项目名，随便填 Homepage URL：博客地址，也就是要访问的地址，我的是https://waldeincheng.github.io/Python-Notes Application description：应用描述，随便填，我的是waldeincheng’s blog Authorization callback URL:可以指向新的URL,或者跟上面的Homepage URL一样即可 完成后会生成相应的clientID和clientSecret 第二步：配置gittalkdocsify下有一个index.html配置文件，打开，添加上 &lt;link rel=\"stylesheet\" href=\"//unpkg.com/gitalk/dist/gitalk.css\"&gt; &lt;script src=\"//unpkg.com/docsify/lib/plugins/gitalk.min.js\"&gt;&lt;/script&gt; &lt;script src=\"//unpkg.com/gitalk/dist/gitalk.min.js\"&gt;&lt;/script&gt; &lt;script&gt; const gitalk = new Gitalk({ clientID: 'bec89b8d6a560d1fc883', clientSecret: 'd156a16ac84fee346d852d54c5bbd6b56a36469b', repo: 'Python-Notes', owner: 'WaldeinCheng', admin: ['WaldeinCheng'], // facebook-like distraction free mode distractionFreeMode: false }) &lt;/script&gt; 配置： , css文件放到index.html里的`\\`标签里 clientID:刚刚获取的ID clientSecret:刚刚获取的授权密码 repo:仓库名 owner：github用户名 admin：[‘github用户名’] 保存修改，git提交上去就行了，显示格式如图 Windows自动启动Docsify使用 .bat 的话，会显示一个短暂的黑窗口所以要想后台静默运行，需要用到 .vbs 脚本 创建vbs脚本在docsify目录下新建一个vbs文件，内容如下 set ws=WScript.CreateObject(\"WScript.Shell\") ws.Run \"docsify serve\",0 该脚本含义为在当前目录下执行 docsify serve 命令 开启启动windows 开机会自动调用下列两个文件夹下的可执行文件 用户目录的自启文件夹： C:\\Users\\用户名\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup 注意用户名，每个用户都不相同 所有用户都会执行的全局自启文件夹 C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp 在脚本上右键创建快捷方式，然后将这个快捷方式放到上述两个文件夹任意一个即可","categories":[{"name":"折腾","slug":"折腾","permalink":"http://www.tianzd.cn/categories/%E6%8A%98%E8%85%BE/"}],"tags":[{"name":"博客搭建教程","slug":"博客搭建教程","permalink":"http://www.tianzd.cn/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"},{"name":"Docsify","slug":"Docsify","permalink":"http://www.tianzd.cn/tags/Docsify/"}],"author":"TianZD"},{"title":"markdown","slug":"效率/markdown","date":"2022-04-23T12:34:26.000Z","updated":"2022-05-23T01:44:28.875Z","comments":true,"path":"posts/96be88e3.html","link":"","permalink":"http://www.tianzd.cn/posts/96be88e3.html","excerpt":"","text":"[toc] MarkdownMarkdown索引索引文件夹效率 索引文件markdown 图片超链接&lt;p align=\"left\"&gt; &lt;a href=\"https://mp.weixin.qq.com/s/ePhaYezFblgt0NgbvtWqww\" target=\"_blank\"&gt; &lt;img src=\"https://cdn.jsdelivr.net/gh/justacoder99/r2coding@master/img/localsoftware.2x9vakmja2g.png\" width=\"\"/&gt; &lt;/a&gt; &lt;/p&gt; ``` Markdown插入图片直接插入![图片描述关键词](图片链接地址) PicGo + Gitee(码云)实现免费markdown图床 HTML插入-排版&lt;center&gt; &lt;img src =\"https://gitee.com/tianzhendong/img/raw/master//images/202202111342399.png\" width = \"25%\"&gt; &lt;br&gt; 这是图注 &lt;/center&gt; 这是图注 Markdown插入音频使用audio 标签&lt;audio id=\"audio\" controls=\"\" preload=\"none\"&gt; &lt;source id=\"mp3\" src=\"音频地址\"&gt; &lt;/audio&gt; 使用iframe标签我们以网易云音乐为例 1.首先在网易云音乐播放界面，点击生成外链播放器 Markdown插入视频html中的iframe标签&lt;iframe src=\"视频或者网页路径\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" height=600 width=800&gt; &lt;/iframe&gt; &lt;!-- 相当于是子网页 --&gt; &lt;!-- B站分享链接提供 --&gt; html中的video标签&lt;!-- mp4格式 --&gt; &lt;video id=\"video\" controls=\"\" preload=\"none\" poster=\"封面\"&gt; &lt;source id=\"mp4\" src=\"mp4格式视频\" type=\"video/mp4\"&gt; &lt;/videos&gt; &lt;!-- webm格式 --&gt; &lt;video id=\"video\" controls=\"\" preload=\"none\" poster=\"封面\"&gt; &lt;source id=\"webm\" src=\"webm格式视频\" type=\"video/webm\"&gt; &lt;/videos&gt; &lt;!-- ovg格式 --&gt; &lt;video id=\"video\" controls=\"\" preload=\"none\" poster=\"封面\"&gt; &lt;source id=\"ogv\" src=\"ogv格式视频\" type=\"video/ogv\"&gt; &lt;/videos&gt; 如何优雅地在Markdown中输入数学公式来自CSDN文章 基础部分公式标记在Markdown中，有两种输入公式的方法：一是行内公式（inline），用一对美元符号$包裹。二是整行公式（displayed），用一对紧挨的两个美元符号$$包裹。 这是一个行内公式$E=mc^2$，写法是：$E=mc^2$。 这是一个整行公式： 写法是： \\sum_{i=0}^n i^2 = \\frac{(n^2+n)(2n+1)}{6} $$\\sum_{i=0}^n i^2 = \\frac{(n^2+n)(2n+1)}{6}$$ $$ \\sum_{i=0}^n i^2 = \\frac{(n^2+n)(2n+1)}{6} $$ 希腊字母 名称 大写 Tex 小写 Tex alpha $A$ A $\\alpha$ \\alpha beta $B$ B $beat$ \\beat gamma $\\Gamma$ \\Gamma $\\gamma$ \\gamma delta $\\Delta$ \\Delta $\\delta$ \\delta epsilon $E$ E $\\epsilon$ \\epsilon zeta $Z$ Z $\\zeta$ \\zeta eta $H$ H $\\eta$ \\eta theta $\\Theta$ \\Theta $\\theta$ \\theta iota $I$ I $\\iota$ \\iota kappa $K$ K $\\kappa$ \\kappa lambda $\\Lambda$ \\Lambda $\\lambda$ \\lambda mu $M$ M $\\mu$ \\mu nu $N$ N $\\nu$ \\nu xi $\\Xi$ \\Xi $\\xi$ \\xi omicron $O$ O $\\omicron$ \\omicron pi $\\Pi$ \\Pi $\\pi$ \\pi rho $P$ P $\\rho$ \\rho sigma $\\Sigma$ \\Sigma $\\sigma$ \\sigma tau $T$ T $\\tau$ \\tau upsilon $\\Upsilon$ \\Upsilon $\\upsilon$ \\upsilon phi $\\Phi$ \\Phi $\\phi$ \\phi chi $X$ X $\\chi$ \\chi psi $\\Psi$ \\Psi $\\psi$ \\psi omega $\\Omega$ \\Omega $\\omega$ \\omega 上标与下标上标和下标分别使用^和_来表示。例如x_i^2：$x_i^2$，\\log_2 x：$\\log_2 x$。 默认情况下，上下标符号仅仅对下一个组起作用。一个组即单个字符或者使用{}包裹起来的内容。也就是说，如果使用10^10会得到$10^10$，而10^{10}才是$10^{10}$。同时，大括号还能消除二义性，如x^5^6会显示错误，必须使用大括号来界定^的结合性，如{x^5}^6${x^5}^6$或者x^{5^6}：$x^{5^6}$。注意区分x_i^2：$x_i^2$和x_{i_2}：$x_{i_2}$。 另外，如果要在左右两边都有上下标，可以用\\sideset来表示，如\\sideset{^1_2}{^3_4}\\bigotimes：$\\sideset{^1_2}{^3_4}\\bigotimes$。 括号 小括号与方括号：使用原始的()和[]即可。如(2+3)[4+4]：$(2+3)[4+4]$。 大括号：由于大括号{}被用来分组，因此需要使用\\{和\\}表示大括号，也可以使用\\lbrace和\\rbrace来表示。如\\{a*b\\}或者\\lbrace a*b \\rbrace，都会显示为$\\lbrace a*b \\rbrace$。 尖括号：使用\\langle和\\rangle分别表示左尖括号和右尖括号。如\\langle x \\rangle：$\\langle x \\rangle$。 上取整：使用\\lceil和\\rceil表示。如\\lceil x \\rceil：$\\lceil x \\rceil$。 下取整：使用\\lfloor和\\rfloor表示。如\\lfloor x \\rfloor：$\\lfloor x \\rfloor$。 需要注意的是，原始括号并不会随着公式大小缩放。如(\\frac12)：。可以使用\\left( ...\\right)来自适应的调整括号。如\\left( \\frac12 \\right)：$\\left( \\frac12 \\right)$。可以明显看出，后一组公式中的括号是经过缩放的。 求和与积分\\sum用来表示求和符号，其下标表示求和下限，上标表示上线。如\\sum_1^n：$\\sum_1^n$。 \\int用来表示积分符号，同样地，其上下标表示积分的上下限。如\\int_1^\\infty：$\\int_1^\\infty$。 与此类似的符号还有，\\prod：$\\prod$，\\bigcup：$\\bigcup$，\\bigcap：$\\bigcap$，\\iint：$\\iint$。 分式与根式分式有两种表示方法。第一种，使用\\frac ab，其中\\frac作用于气候的两个组a和b，结果为$\\frac ab$。如果分子或分母不是单个字符，需要使用{}来分组。第二种，使用\\over来分隔一个组的前后两部分，如{a+1\\over b+1}：${a+1\\over b+1}$。 根式使用\\sqrt[a]b来表示。其中，方括号内的值用来表示开几次方，省略方括号则表示开方，如\\sqrt[4]{\\frac xy}：$\\sqrt[4]{\\frac xy}$，\\sqrt{x^3}：$\\sqrt{x^3}$。 矩阵\\left[ \\begin{matrix} x11 &amp; x12 \\\\x21 &amp; x22\\\\ \\end{matrix} \\right] 前后用\\left和\\right包围，[]标识用方括号$$\\left[ \\begin{matrix}x11 &amp; x12 \\x21 &amp; x22\\\\end{matrix} \\right]$$ \\left[\\begin{matrix} p_{11}&amp;p_{12}\\\\p_{21}&amp;p_{22}\\\\ \\end{matrix}\\right]_k^-=\\left[\\begin{matrix} 1&amp;dt\\\\0&amp;1\\\\ \\end{matrix}\\right] \\left[\\begin{matrix} p_{11}&amp;p_{12}\\\\p_{21}&amp;p_{22}\\\\ \\end{matrix}\\right]_{k-1} \\left[\\begin{matrix} 1&amp;0\\\\dt&amp;1\\\\ \\end{matrix}\\right] +\\left[\\begin{matrix} Q_{11}&amp;Q_{12}\\\\Q_{21}&amp;Q_{22}\\\\ \\end{matrix}\\right] $$\\left[\\begin{matrix}p_{11}&amp;p_{12}\\p_{21}&amp;p_{22}\\\\end{matrix}\\right]k^-=\\left[\\begin{matrix}1&amp;dt\\0&amp;1\\\\end{matrix}\\right]\\left[\\begin{matrix}p{11}&amp;p_{12}\\p_{21}&amp;p_{22}\\\\end{matrix}\\right]{k-1}\\left[\\begin{matrix}1&amp;0\\dt&amp;1\\\\end{matrix}\\right]+\\left[\\begin{matrix}Q{11}&amp;Q_{12}\\Q_{21}&amp;Q_{22}\\\\end{matrix}\\right]$$ 字体 使用\\it显示意大利体（公式默认字体）：$ACDEFGHIJKLMnopqrstuvwxyz$。 使用\\mathbb或\\Bbb显示黑板粗体（黑板黑体），如\\mathbb{CHNQRZ}：$\\mathbb{CHNQRZ}$。 使用\\mathbf或\\bf示黑体：$\\bf ABCDEFGHIJKLMnopqrstuvwxyzABCDEFGHIJKLMnopqrstuvwxyz$。 使用\\mathtt或\\tt显示打印机字体：$\\tt{ABCDEFGHIJKLMnopqrstuvwxyz}$ MarkDown符号大全","categories":[{"name":"效率","slug":"效率","permalink":"http://www.tianzd.cn/categories/%E6%95%88%E7%8E%87/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"http://www.tianzd.cn/tags/markdown/"},{"name":"效率","slug":"效率","permalink":"http://www.tianzd.cn/tags/%E6%95%88%E7%8E%87/"}],"author":"TianZD"},{"title":"LuckyBlog开源搭建教程-转载","slug":"blog/BlogOpen","date":"2020-09-16T16:00:00.000Z","updated":"2022-05-23T00:28:05.896Z","comments":true,"path":"posts/d74d8b76.html","link":"","permalink":"http://www.tianzd.cn/posts/d74d8b76.html","excerpt":"","text":"来自Lucky的个人网站 前言之前在B站上发布了个人博客的视频，播放量也破千了，有网友私聊也想要搭建一个这样的博客。经过一段时间的准备，现将本人博客的源代码公布出来，大家只需要根据以下的步骤，即可快速搭建一个漂亮完善的博客。 0x01 LuckyBlog 介绍上一个LuckyBlog版本发布于2020年的9月份，是在 洪卫の博客 基础上进行修改的。自从发布以来有很多网友都私信搭建了博客，同时也发现了旧版本中存在的一些问题需要解决，例如：搜索框不适配XML代码搜索，部分图片失效，代码块问题以及各种小问题。现在将最新的LuckyBlog版本代码发布出来，修复改进了不少的BUG，使其更加稳定运行。同时完善了博客的基础功能，例如：音乐、视频、相册、百宝箱等页面。同时增加了不少的新功能，例如：适配Hexo5.x、黑白天浏览模式、仿Windows页面，站点统计等。 博客演示地址：http://luckyzmj.cn/ 开源项目地址：https://github.com/LuckyZmj/LuckyBlog 主题特性 简单漂亮，文章内容美观易读 Material Design 设计 响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现 首页轮播文章及每天动态切换 Banner 图片 瀑布流式的博客文章列表（文章无特色图片时会有 24 张漂亮的图片代替） 时间轴式的归档页 词云的标签页和雷达图的分类页 丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等） 可自定义的数据的友情链接页面 支持文章置顶和文章打赏 支持 MathJax TOC 目录，优化了目录显示效果 可设置复制文章内容时追加版权信息 可设置阅读文章时做密码验证 Gitalk、Gitment、Valine 和 Disqus 评论模块（推荐使用 Valine） 集成了不蒜子统计、谷歌分析（Google Analytics）和文章字数统计等功能 支持在首页的音乐播放和视频播放功能 修改了原主题以及基础主题中的一些BUG 加入图片懒加载功能，在根目录配置文件开启和关闭 增加留言板功能 在关于板块,加入简历功能页 增加完善音乐、相册、视频等功能页面 支持emoji表情，用markdown emoji语法书写直接生成对应的能跳跃的表情 增加网站运行时间显示 增加live2d 动漫人物模型 整体替换Banner图片和文章特色图片 增加实用的快捷导航栏功能 修改了一些控件的参数以及部分样式 优化了代码显示块的效果 增加页面樱花飘落动效 增加鼠标点击烟花爆炸动效 增加页面雪花飘落动效 增加博客白云背景效果 增加天气接口控件 加入鼠标点击文字特效 增加DaoVoice在线聊天插件 增加博客代码、图片压缩功能 增加黑白天浏览模式功能 增加仿Windows功能 增加站点统计功能 增加留言版一言功能 其他 0x02 LuckyBlog 安装1. 安装GitGit是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。Git的作用是将本地的网页文件传到github上。 Git下载地址 Git教程 windows： 到git官网上下载.exe文件,Download git,安装选项全部默认即可。 2. 安装node.jsHexo是基于node.js编写的，所以需要安装一下node.js和里面的npm工具。 windows： 到Node.js官网下载.exe文件，安装选项全部默认。安装好之后，按Win+R打开cmd命令提示符，输入node -v和npm -v，若出现版本号，则说明安装成功。 3. 添加npm国内源使用阿里的国内镜像进行加速下载 npm config set registry https://registry.npm.taobao.org 4. 安装Hexo前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹MyBlog，用来存放自己的博客文件，然后cd到这个文件夹下（或者在这个文件夹下直接鼠标右键git bash打开）。 比如我的博客文件都存放在C:\\MyBlog目录下。 在该目录下右键点击Git Bash Here，打开git的控制台窗口，以后我们所有的操作都在git控制台进行，就不用Windows自带的cmd了。 定位到该目录下，输入npm install -g hexo-cli安装Hexo。可能会有几个报错，不用理会。 npm install -g hexo-cli 安装完后输入hexo -v验证是否安装成功。 接下来初始化一下hexo,即初始化我们的博客网站。例如我的在C:\\MyBlog文件夹下的命令行中，输入hexo init初始化文件夹 hexo init 新建完成后，指定文件夹MyBlog目录下有： node_modules: 依赖包 public：存放生成的页面 scaffolds：生成文章的一些模板 source：用来存放你的文章 themes：主题** _config.yml: 博客的配置文件** 到此为止，本地的Hexo基础环境搭建完成了。 5. 安装LuckyBlog下载源代码到本地文件下 git clone https://github.com/LuckyZmj/LuckyBlog.git 将下载好的LuckyBlog全部复制到MyBlog目录下，如果复制过程中出现重复文件，点击替换。 最后使用 npm i 或者 npm install 安装依赖环境包即可。 如果安装依赖环境出错，可以参考这篇文章。 最后执行 hexo clean 和 hexo s -g 启动Hexo本地预览，即可看到效果。 到此为止LuckyBlog安装完成，接下来就是个性化设置了。 0x03 LuckyBlog 个性化 注意！注意！注意！在阅读以下博客个性化之前，最好希望大家有Hexo博客配置主题的基础。如果是完全小白，建议去网上搜索学习相关Hexo搭建博客的过程，另外去B站上也有很多视频教程。博客个性化是需要大家有耐心的，因为每个人的操作不同，在配置过程中可能会遇到一些不可预期的问题，希望大家可以克服这些困难，如有需要帮助，也可以私信博主帮助大家解决问题。 1. 修改部署平台编辑根目录下的配置文件MyBlog/_config.yml，找到如下内容并修改 deploy: - type: git repo: git@github.com:LuckyZmj/LuckyZmj.github.io.git # 替换为你的部署平台地址 branch: master 2. 修改网站信息编辑根目录下的配置文件MyBlog/_config.yml，找到如下内容并修改 # Site title: Luckey subtitle: 'Luckeyの博客' description: '本科 | 计算机科学与技术 | 网络安全' keywords: 'luckyzmj 计算机 网络安全 渗透测试' # 博客网站关键词 author: Luckey # 博主名称 language: zh-CN timezone: '' # URL ## If your site is put in a subdirectory, set url as 'http://example.com/child' and root as '/child/' url: http://www.luckyzmj.cn # 更改为你的博客地址 root: / # permalink: :year/:month/:day/:title/ permalink: posts/:abbrlink.html # p 是自定义的前缀 abbrlink: alg: crc32 #算法： crc16(default) and crc32 rep: hex #进制： dec(default) and hex permalink_defaults: pretty_urls: trailing_index: true # Set to false to remove trailing 'index.html' from permalinks trailing_html: true # Set to false to remove trailing '.html' from permalinks 3. 修改博客头像编辑主题目录下的配置文件MyBlog/themes/matery/_config.yml，找到如下内容并修改 # Configure website favicon and LOGO # 将以下改为自己的头像链接即可 favicon: https://s1.ax1x.com/2020/05/17/YR20js.jpg logo: https://s1.ax1x.com/2020/05/17/YRWsYT.png 4. 修改留言板简介演示效果如下： 编辑 /MyBlog/contact/index.md，修改你想要内容即可 --- title: contact date: 2019-10-25 00:00:00 type: \"contact\" layout: \"contact\" --- ## 畅所欲言 --- 在这里可以留下你的足迹，欢迎在下方留言，欢迎交换友链，一起交流学习！ ## 友链 --- Lucky_Meの友链信息 博客名称: Lucky_Meの博客 博客网址: http://luckyzmj.cn 博客头像: https://s1.ax1x.com/2020/05/17/YRWsYT.png 博客介绍: 知识面决定攻击面，知识链决定攻击深度！ 5. 修改音乐列表想要修改自己喜欢的音乐之前，需要先获取音乐列表的id。 以QQ音乐为例：先登录QQ音乐网页版，点击打开自己喜欢的音乐列表，在网页的URL处包含了音乐列表的id，如下图所示 编辑主题目录下的配置文件MyBlog/themes/matery/_config.yml，找到如下内容并修改 # 默认是博主的QQ音乐的id，大家可以改为自己音乐喜欢列表的id # 更新完id，就可以同步加载自己喜欢的列表音乐了 # Whether to display the musics. # 是否在首页显示音乐. music: enable: true title: #非吸底模式有效 enable: true show: 听听音乐 autoHide: true # hide automaticaly server: tencent #require music platform: netease, tencent, kugou, xiami, baidu type: playlist #require song, playlist, album, search, artist id: 1776127550 #require song id / playlist id / album id / search keyword fixed: true # 开启吸底模式 autoplay: false # 是否自动播放 theme: '#42b983' loop: 'all' # 音频循环播放, 可选值: 'all', 'one', 'none' order: 'random' # 音频循环顺序, 可选值: 'list', 'random' preload: 'auto' # 预加载，可选值: 'none', 'metadata', 'auto' volume: 0.7 # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效 listFolded: true # 列表默认折叠 hideLrc: true # 隐藏歌词 # Whether to display the musics. # 单独的音乐页面. musics: enable: true title: #非吸底模式有效 enable: true show: 听听音乐 server: tencent #require music platform: netease, tencent, kugou, xiami, baidu type: playlist #require song, playlist, album, search, artist id: 1776127550 #require song id / playlist id / album id / search keyword fixed: false # 开启吸底模式 autoplay: true # 是否自动播放 theme: '#42b983' loop: 'all' # 音频循环播放, 可选值: 'all', 'one', 'none' order: 'random' # 音频循环顺序, 可选值: 'list', 'random' preload: 'auto' # 预加载，可选值: 'none', 'metadata', 'auto' volume: 0.7 # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效 listFolded: false # 列表默认折叠 listMaxHeight: \"525px\" #列表最大高度 6. 绑定 Valine 评论编辑主题目录下的配置文件MyBlog/themes/matery/_config.yml，找到如下内容并修改 # Valine 评论模块的配置，默认为不激活，如要使用，就请激活该配置项，并设置 appId 和 appKey. valine: enable: true appId: Ucrxxxxxxxxxxxxxxxx-xxxxsz # 自行注册valine获取 appKey: zPsLxxxxxxxxxxxxxxerLmd # 自行注册valine获取 notify: true verify: true visitor: true avatar: 'monsterid' # Gravatar style : mm/identicon/monsterid/wavatar/retro/hide pageSize: 10 placeholder: '留下你的足迹..' # Comment Box placeholder background: /medias/comment_bg.png count: true enableQQ: 16463223 # 改为自己的QQ号 recordIP: true requiredFields: - nick - mail guest_info: - nick - mail - link master: - 46606772953bed0812789d6dc955614e # md5加密后的博主邮箱 metaPlaceholder: # 输入框的背景文字 nick: 昵称/QQ号(必填) mail: 邮箱(必填) link: 网址(https://) lang: zh-CN tagMeta: # The String Array of Words to show Flag.[Just Only xCss Style mode] - 博主 - 小伙伴 - 访客 friends: # The MD5 String Array of friends Email to show friends Flag.[Just Only xCss Style mode] - cb3e577ff029d6073400d5557effd41f - 7. 绑定 DaoVoice 在线聊天编辑主题目录下的配置文件MyBlog/themes/matery/_config.yml，找到如下内容并修改 daovoice: enable: true app_id: 4xxxxxxxe #DaoVoice中的app_id 8. 快捷导航页面个性化编辑文件MyBlog/source/tools/index.html，以下简单标记出几处，还有其他涉及到博客信息的内容都需要改为你自己的博客信息即可。 9. 添加友情链接编辑文件MyBlog/suorce/_data/friends.json，按如下格式添加友情 [ { \"avatar\": \"https://s1.ax1x.com/2020/05/17/YRWsYT.png\", \"name\": \"Luckey\", \"introduction\": \"越努力，越幸运\", \"url\": \"http://www.luckyzmj.cn\", \"title\": \"访问主页\" },{ \"avatar\": \"https://sunhwee.com/hwsun.jpg\", \"name\": \"洪卫の博客\", \"introduction\": \"UESTC CVer\", \"url\": \"http://sunhwee.com\", \"title\": \"访问主页\" } ] 10. 添加相册比如你的图片上传图床后，链接地址如下 https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/galleries/璀璨星空/01.jpg https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/galleries/璀璨星空/02.jpg https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/galleries/动漫风景/01.jpg https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/galleries/动漫风景/02.jpg ... 首先提取出图片链接公共的部分，作为图床地址 https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/galleries/ 然后再提取图片地址中不同的部分，作为图片地址 璀璨星空/01.jpg 璀璨星空/02.jpg 动漫风景/01.jpg 动漫风景/03.jpg ... 具体怎么分割根据你自己图床的链接格式而定，以上为我的github图床格式为例。 将相册图床的地址改为你自己的图床地址，需要更改两处文件 # 例如我的图床地址为： https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/galleries/ themes/matery/layout/galleries.ejs themes/matery/layout/gallerie.ejs 为每个相册添加链接地址，在根目录/source/List/galleries/下新建 相册名称 文件夹，并在该文件夹下新建 index.md 最后，在根目录/source/_data/galleries.json中添加图片链接，格式如下, [ { \"name\": \"璀璨星空\", \"cover\": \"璀璨星空/01.jpg\", \"description\": \"璀璨星空\", \"photos\": [ \"璀璨星空/01.jpg\", \"璀璨星空/02.jpg\", \"璀璨星空/03.jpg\", \"璀璨星空/04.jpg\", \"璀璨星空/05.jpg\", \"璀璨星空/06.jpg\", \"璀璨星空/07.jpg\", \"璀璨星空/08.jpg\", \"璀璨星空/09.jpg\", \"璀璨星空/10.jpg\", \"璀璨星空/11.jpg\", \"璀璨星空/12.jpg\", \"璀璨星空/13.jpg\", \"璀璨星空/14.jpg\", \"璀璨星空/15.jpg\", \"璀璨星空/16.jpg\" ] }, { \"name\": \"动漫风景\", \"cover\": \"动漫风景/01.jpg\", \"description\": \"动漫风景\", \"photos\": [ \"动漫风景/01.jpg\", \"动漫风景/02.jpg\", \"动漫风景/03.jpg\", \"动漫风景/04.jpg\", \"动漫风景/05.jpg\", \"动漫风景/06.jpg\", \"动漫风景/07.jpg\", \"动漫风景/08.jpg\", \"动漫风景/09.jpg\", \"动漫风景/10.jpg\", \"动漫风景/11.jpg\", \"动漫风景/12.jpg\", \"动漫风景/13.jpg\", \"动漫风景/14.jpg\", \"动漫风景/15.jpg\", \"动漫风景/16.jpg\" ] } ] 11. 站点统计功能站点统计的数据来源于百度统计,当你的网站被百度收录后就会在百度统计中出现数据，具体效果如下： 由于博客的统计页面数据不能直接从百度站点中调用，因此需要自行从百度站点中将相应数据填入博客站点统计页面的源代码文件中，个人建议每隔一个月手动更新一次数据。 打开MyBlog\\themes\\matery\\layout\\census.ejs文件，将百度统计中的数据填入源代码中，修改代码如下： 11. 仿Windows个性化仿Windows页面是采用YLUI实现的，YLUI提供了社区版本供大家学习使用，具体效果如下： 大家可以查看YLUI官方的开发文档进行开发，有不懂的可以加官方的QQ群：191372634 进行讨论。 12. 博客动漫风格背景图因为在上一个LuckyBlog版本发布的网站风格是偏向动漫风格的，如果大家喜欢动漫风格，只需要替换以下配置即可。 博客每日轮播图： 以下链接图片全部下载保存到MyBlog\\themes\\matery\\source\\medias\\banner中，以0~7.jpg的文件名格式命名即可。 https://cdn.jsdelivr.net/gh/LuckyZmj/LuckyBlog@master/themes/matery/source/medias/banner/0.jpg https://cdn.jsdelivr.net/gh/LuckyZmj/LuckyBlog@master/themes/matery/source/medias/banner/1.jpg https://cdn.jsdelivr.net/gh/LuckyZmj/LuckyBlog@master/themes/matery/source/medias/banner/2.jpg https://cdn.jsdelivr.net/gh/LuckyZmj/LuckyBlog@master/themes/matery/source/medias/banner/3.jpg https://cdn.jsdelivr.net/gh/LuckyZmj/LuckyBlog@master/themes/matery/source/medias/banner/4.jpg https://cdn.jsdelivr.net/gh/LuckyZmj/LuckyBlog@master/themes/matery/source/medias/banner/5.jpg https://cdn.jsdelivr.net/gh/LuckyZmj/LuckyBlog@master/themes/matery/source/medias/banner/6.jpg https://cdn.jsdelivr.net/gh/LuckyZmj/LuckyBlog@master/themes/matery/source/medias/banner/7.jpg 无文章特色背景图： 打开主题配置文件MyBlog\\themes\\matery\\_config.yml，修改替换如下代码即可： # The post featured images that needs to be displayed when there is no image. # 无文章特色图片时需要显示的文章特色图片. featureImages: - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/01.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/02.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/04.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/06.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/07.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/10.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/11.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/12.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/09.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/14.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/15.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/16.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E4%BA%8C%E6%AC%A1%E5%85%83%E9%A3%8E/06.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/02.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/03.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/04.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/07.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/08.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/11.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/10.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/09.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/12.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/13.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/14.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E7%92%80%E7%92%A8%E6%98%9F%E7%A9%BA/16.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E7%92%80%E7%92%A8%E6%98%9F%E7%A9%BA/15.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E7%92%80%E7%92%A8%E6%98%9F%E7%A9%BA/11.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E7%92%80%E7%92%A8%E6%98%9F%E7%A9%BA/09.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E7%92%80%E7%92%A8%E6%98%9F%E7%A9%BA/03.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/08.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/03.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/13.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/01.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/05.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E7%92%80%E7%92%A8%E6%98%9F%E7%A9%BA/14.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E7%92%80%E7%92%A8%E6%98%9F%E7%A9%BA/01.jpg 0x04 更多内容优化以上简单介绍了 LuckyBlog 中一些要修改的个性化地方，其他更详细的优化参考其他关于Matery的文章。以下几篇文章都是基于hexo-theme-matery主题优化的教程，大家如果遇到问题，可以参考其中的方法。 个人博客搭建 Hexo+Github博客搭建完全教程 hexo-theme-matery作者教程 Hexo+github搭建博客(超级详细版，精细入微) hexo（matery）背景、滚动条优化+增加点击跳评论","categories":[{"name":"Luckey博客篇","slug":"Luckey博客篇","permalink":"http://www.tianzd.cn/categories/Luckey%E5%8D%9A%E5%AE%A2%E7%AF%87/"}],"tags":[{"name":"转载","slug":"转载","permalink":"http://www.tianzd.cn/tags/%E8%BD%AC%E8%BD%BD/"},{"name":"hexo-blog-lucky","slug":"hexo-blog-lucky","permalink":"http://www.tianzd.cn/tags/hexo-blog-lucky/"},{"name":"博客搭建教程","slug":"博客搭建教程","permalink":"http://www.tianzd.cn/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"}],"author":"luckyzmj"},{"title":"Hexo之渲染绕过-转载","slug":"blog/Hexo-xr","date":"2020-04-27T16:00:00.000Z","updated":"2022-05-23T00:28:05.907Z","comments":true,"path":"posts/17fd92ae.html","link":"","permalink":"http://www.tianzd.cn/posts/17fd92ae.html","excerpt":"","text":"来自Lucky的个人网站 0x001 Hexo 渲染 在Hexo部署时会默认渲染source下的所有html页面，但有时候想在Hexo博客上单独自定义html页面或README.md时，却不希望被Hexo渲染。因此对某个文件或者目录进行排除渲染是非常必要的。 0x002 方法一：font matterHexo新建网站页面，然后将你的代码直接写入 index.md 中 在 Front matter 中添加 layout: false，此方法适用于单一的纯HTMLCSS 页面。 --- title: tools date: 2020-04-28 00:00:00 type: \"tools\" layout: false --- 0x003 方法二：skip render在博客根目录下的 _config.yml，找到 skip_render，大概在32行左右，写入你想要的跳过渲染的路径，注意缩进和空格。 # 指定目录跳过hexo渲染 skip_render: - 'tools/*' - 'tools/**' 注释：tools/* 表示在目录 source/fireworks 下的文件全部跳过渲染，tools/** 表示在博客根目录 source/tools/ 文件夹下的文件全部跳过渲染（例如页面的 js、css 在另一个文件夹中）。 0x004 案例：webstack 导航webstack是一个纯静态的网址导航网站，内容均由viggo收集并整理。项目基于bootstrap前端框架开发。 Github：https://github.com/WebStackPage/WebStackPage.github.io 在博客根目录 source/下新建tools，然后新建index.html,将webstack网页源码全选复制粘贴到里面。 本站的webstack源码：view-source:http://luckyzmj.cn/tools/ 注意：将源码里的部分信息以及跳转链接按照你真实个人博客的环境进行修改。 然后打开博客根目录下配置文件_config.yml，找到skip_render，做如下修改： skip_render: - 'tools/*' - 'tools/**' 最后执行hexo clean和hexo s -g 本地预览，检查无误后hexo g -d部署到服务器上即可。 参考文章 https://xiabor.com/2020/04/21/hexo3/#%E5%A6%82%E4%BD%95%E8%B7%B3%E8%BF%87hexo%E7%9A%84%E6%B8%B2%E6%9F%93","categories":[{"name":"Luckey博客篇","slug":"Luckey博客篇","permalink":"http://www.tianzd.cn/categories/Luckey%E5%8D%9A%E5%AE%A2%E7%AF%87/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://www.tianzd.cn/tags/Hexo/"},{"name":"渲染绕过","slug":"渲染绕过","permalink":"http://www.tianzd.cn/tags/%E6%B8%B2%E6%9F%93%E7%BB%95%E8%BF%87/"},{"name":"转载","slug":"转载","permalink":"http://www.tianzd.cn/tags/%E8%BD%AC%E8%BD%BD/"}],"author":"Luckey"},{"title":"阿里云服务器部署Hexo博客-转载","slug":"blog/blog-aliyun","date":"2020-02-26T16:00:00.000Z","updated":"2022-05-23T00:28:05.911Z","comments":true,"path":"posts/19d2a4e6.html","link":"","permalink":"http://www.tianzd.cn/posts/19d2a4e6.html","excerpt":"","text":"来自Lucky的个人网站 前言 相信大部分人使用Hexo搭建个人博客都会部署到一些免费的代码托管平台上，但这些免费的平台总是差强人意，比如国外的GitHub平台虽然完全免费，但在国内访问加载速度非常慢，又或者是国内的码云平台免费版有许多功能被阉割掉了，比如不能自定义域名，不能每次自动刷新提交的代码，需要到码云平台上手动刷新，如此一来非常繁琐。 为了有效解决上诉的一些问题，有条件的话，不妨在自己的云服务器上搭建Hexo博客。 效果演示 这是Hexo博客部署到GitHub上的网站测速效果 这是Hexo博客部署到阿里云服务器后的网站测速效果 环境准备 本地环境：Windows 10 云服务器环境：阿里云ECS（CentOS7.x） 开始部署 本地环境搭建1.安装Git 到git官网上下载.exe文件,Download git,安装选项还是全部默认，最后一步添加路径时选择Use Git from the Windows Command Prompt。 Git下载地址 Git教程 2.安装Nodejs 到Node.js官网下载.exe文件，安装选项全部默认。安装好之后，按Win+R打开cmd命令提示符，输入node -v和npm -v，若出现版本号，则说明安装成功。 使用npm阿里的国内镜像进行加速下载 npm config set registry https://registry.npm.taobao.org 4.安装Hexo 先创建一个文件夹MyBlog，用来存放自己的博客文件，然后cd到这个文件夹下（或者在这个文件夹下直接右键git bash here打开）。 定位到该目录下，输入npm install -g hexo-cli安装Hexo。可能会有几个报错，不用理会。 npm install -g hexo-cli 安装完后输入hexo -v,若出现版本号则，说明安装成功。 接下来初始化一下hexo,即初始化我们的博客，输入hexo init初始化文件夹 hexo init MyBlog 新建完成后，指定文件夹MyBlog目录下有： node_modules: 依赖包 public：存放生成的页面 scaffolds：生成文章的一些模板 source：用来存放你的文章 themes：主题** _config.yml: 博客的配置文件** 输入hexo g生成静态网页，然后输入hexo s打开本地服务器预览 hexo g hexo s 生成ssh公钥在本地桌面点击右键Git Bash Here打开Git终端，执行如下命令`,一路回车 ssh-keygen -t rsa 这个时候它会告诉你已经生成了.ssh的文件夹。在git bash中输入 cat ~/.ssh/id_rsa.pub 输出的内容就是公钥信息了 阿里云服务器环境搭建安装Git yum install git 创建Git账户 adduser git 添加账户权限 chmod 740 /etc/sudoers vim /etc/sudoers 找到 ## Allow root to run any commands anywhere root ALL=(ALL) ALL 添加以下内容 git ALL=(ALL) ALL 保存退出并改回权限 chmod 400 /etc/sudoers 设置git账户密码 sudo passwd git 切换至git用户，创建 ~/.ssh 文件夹和 ~/.ssh/authorized_keys 文件，并赋予相应的权限 su git mkdir ~/.ssh vim ~/.ssh/authorized_keys # 然后将win10中生成的id_rsa.pub文件中的公钥复制到authorized_keys chmod 600 /home/git/.ssh/authorized_keys chmod 700 /home/git/.ssh 在本地Git终端中测试是否能免密登录git，其中SERVER为填写自己的云主机IP，执行输入yes后不用密码就说明好了 ssh -v git@SERVER 创建目录 #repo作为为Git仓库目录 mkdir /var/repo chown -R git:git /var/repo chmod -R 755 /var/repo #hexo作为网站根目录 mkdir /var/www/hexo chown -R git:git /var/www/hexo chmod -R 755 /var/www/hexo 然后创建一个裸的 Git 仓库 cd var/repo git init --bare hexoBlog.git 创建一个新的 Git 钩子，用于自动部署 在 /var/repo/hexoBlog.git 下，有一个自动生成的 hooks 文件夹。我们需要在里边新建一个新的钩子文件 post-receive。 vim /var/repo/hexoBlog.git/hooks/post-receive 按 i 键进入文件的编辑模式，在该文件中添加两行代码（将下边的代码粘贴进去)，指定 Git 的工作树（源代码）和 Git 目录（配置文件等） #!/bin/bash git --work-tree=/var/www/hexo --git-dir=/var/repo/hexoBlog.git checkout -f 然后，按 Esc 键退出编辑模式，输入”:wq” 保存退出。 修改文件权限，使得其可执行 chown -R git:git /var/repo/hexoBlog.git/hooks/post-receive chmod +x /var/repo/hexoBlog.git/hooks/post-receive 到此为止 Git 仓库就搭建完成了。 阿里云服务器配置Nginx用宝塔面板来一键部署Nginx Linux面板6.0安装命令(暂时仅兼容Centos7.x，其它系统版本请安装5.9稳定版)： yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; bash install.sh Linux面板6.0升级专业版 curl http://download.bt.cn/install/update6.sh|bash 安装完成后会显示面板后台地址·账号·密码。打开面板后台地址登陆面板，选择Nginx的部署方案，静静等待部署。 部署完成，点击网站-添加站点-输入域名(没有域名的输入自己的IP地址)-底部的PHP版本选择”纯静态”-提交。 网站创建完成后点击设置-配置文件 server { listen 80; # server_name 填写自己的域名 server_name luckyzmj.cn blog.luckyzmj.cn; index index.php index.html index.htm default.php default.htm default.html; # 这里root填写自己的网站根目录，修改为/var/www/hexo root /var/www/hexo; -保存 点击设置-网站目录，修改为/var/www/hexo ，保存 重启宝塔面板服务 service bt restart 本地Hexo部署到阿里云服务器进入到本地Hexo博客的文件夹MyBlog,右键点击Git Bash Here，输入命令 #定义邮箱(更换为你的邮箱地址就行) git config --global user.email \"you@example.com\" #定义名称(更换自定义一个名称就行) git config --global user.name \"Your Name\" 配置_config.yml,完成自动化部署 打开本地Hexo博客的文件夹MyBlog文件夹下的_config.yml, 找到deploy deploy: type: git #server改为你的服务IP地址或解析后的域名 #例如我改为repo: git@luckyzmj.cn:/var/repo/blog.git repo: git@server:/var/repo/blog.git branch: master 保存后，即可测试部署 再进入到本地Hexo博客的文件夹MyBlog,右键点击Git Bash Here，输入命令 hexo clean hexo g -d 不报错说明完成，打开浏览器输入你的域名或ip地址就可以看到你部署的Hexo博客了。 到此为止，我们已经成功部完成，并且访问自己的服务器端比访问Github快多了。 小贴士 在部署过程中，执行 hexo d发现部署老是出错，什么权限不允许之类的，这里我们需要检查我们在上述的git操作部署是否使用了git用户操作，若是没有，需要给相应的目录更改用户组 使用 chown -R git:git /var/repo/ 这条命令递归的将repo目录及其子目录用户组设置为git。 同时使用 chown -R git:git /var/www/hexo 这样即可解决此类问题。 还有一个问题就是绑定域名后不能访问。原因是在国内任何域名只要绑定到国内的服务器主机上都必须去工信部和公安部备案完后才能正常使用。如果是港澳台的服务器或者是国外的服务器则可以不需要备案。 参考文章 https://blog.csdn.net/weixin_33907511/article/details/91398208?utm_source=distribute.pc_relevant.none-task","categories":[{"name":"Luckey博客篇","slug":"Luckey博客篇","permalink":"http://www.tianzd.cn/categories/Luckey%E5%8D%9A%E5%AE%A2%E7%AF%87/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://www.tianzd.cn/tags/Hexo/"},{"name":"转载","slug":"转载","permalink":"http://www.tianzd.cn/tags/%E8%BD%AC%E8%BD%BD/"},{"name":"阿里云","slug":"阿里云","permalink":"http://www.tianzd.cn/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"},{"name":"博客","slug":"博客","permalink":"http://www.tianzd.cn/tags/%E5%8D%9A%E5%AE%A2/"}],"author":"Luckey"},{"title":"个人博客搭建-转载","slug":"blog/Blog","date":"2019-08-27T03:41:03.000Z","updated":"2022-05-23T00:28:05.892Z","comments":true,"path":"posts/e3e08109.html","link":"","permalink":"http://www.tianzd.cn/posts/e3e08109.html","excerpt":"","text":"来自Lucky的个人网站 0x001 效果演示 0x002 简单介绍 前前后后大概花了一周多的时间，目前个人博客已经完善的差不多了，现在写个文章做个阶段总结，后续如果有更新的地方，会及时补充。本博客基于Hexo框架，采用hexo-theme-matery主题，在这里非常感谢作者洪卫的hexo-blog-fly博客开源，极大简化了构建博客的工作量和复杂度。在此开源博客的基础上做了改进，修复了一些bug，顺利搭建完成了我的个人博客。大家对此主题有兴趣的可以下载源代码，搭建属于自己的个性化博客。 个人博客 演示：http://luckyzmj.cn 0x003 Hexo 初级搭建 1. 安装GitGit是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。Git的作用是将本地的网页文件传到github上。 Git下载地址 Git教程 windows： 到git官网上下载.exe文件,Download git,安装选项还是全部默认，最后一步添加路径时选择Use Git from the Windows Command Prompt。 2. 安装node.jsHexo是基于node.js编写的，所以需要安装一下node.js和里面的npm工具。 windows： 到Node.js官网下载.exe文件，安装选项全部默认。安装好之后，按Win+R打开cmd命令提示符，输入node -v和npm -v，若出现版本号，则说明安装成功。 3. 添加npm国内源使用阿里的国内镜像进行加速下载 npm config set registry https://registry.npm.taobao.org 4. 安装Hexo前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹MyBlog，用来存放自己的博客文件，然后cd到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。 比如我的博客文件都存放在E:\\MyBlog目录下。 在该目录下右键点击Git Bash Here，打开git的控制台窗口，以后我们所有的操作都在git控制台进行，就不用Windows自带的cmd了。 定位到该目录下，输入npm install -g hexo-cli安装Hexo。可能会有几个报错，不用理会。 npm install -g hexo-cli 安装完后输入hexo -v验证是否安装成功。 到此为止hexo就安装完了。 接下来初始化一下hexo,即初始化我们的网站，输入hexo init初始化文件夹 hexo init MyBlog 新建完成后，指定文件夹MyBlog目录下有： node_modules: 依赖包 public：存放生成的页面 scaffolds：生成文章的一些模板 source：用来存放你的文章 themes：主题** _config.yml: 博客的配置文件** 到此为止，本地的网站配置完成了。 输入hexo g生成静态网页，然后输入hexo s打开本地服务器 hexo g hexo s 5. 注册Github账号创建个人仓库接下来就去注册一个github账号，用来存放我们的网站。 打开https://github.com/，新建一个项目仓库New repository，如下所示： 然后如下图所示，输入自己的项目名字，后面一定要加.github.io后缀，README初始化也要勾上 要创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是http://xxxx.github.io，其中xxx就是你注册GitHub的用户名。例如我的：http://LuckyZmj.github.io 6. 生成SSH添加到GitHub生成SSH添加到GitHub，连接Github与本地。右键打开git bash here，然后输入下面命令： git config --global user.name \"注册GitHub用户名\" git config --global user.email \"注册GitHub的邮箱\" 用以下两条，检查一下你有没有输对 git config user.name git config user.email 然后创建SSH,一路回车 ssh-keygen -t rsa -C \"注册GitHub的邮箱\" 这个时候它会告诉你已经生成了.ssh的文件夹。在git bash中输入 cat ~/.ssh/id_rsa.pub 将输出的内容复制到框中，点击确定保存。 打开github，在头像下面点击settings，再点击SSH and GPG keys，新建一个SSH，名字随便取一个都可以，把你的id_rsa.pub里面的信息复制进去。如图： 在git bash输入ssh -T git@github.com，如果如下图所示，出现你的用户名，那就成功了。 ssh -T git@github.com 7. 将hexo部署到GitHub将hexo生成的文章部署到GitHub上，打开博客根目录下的_config.yml文件，这是博客的配置文件，在这里你可以修改与博客配置相关的各种信息。找到如下配置进行修改： deploy: type: git repository: https://github.com/LuckyZmj/LuckyZmj.github.io branch: master repository修改为你自己的github项目地址即可，就是部署时，告诉工具，将生成网页通过git方式上传到你对应的链接仓库中。 这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。 npm install hexo-deployer-git --save 然后就可以部署提交到github，过一会儿就可以在http://yourname.github.io 这个网站看到你的博客了 hexo clean hexo generate hexo deploy 其中 hexo clean清除了你之前生成的东西。 hexo generate，生成静态文章，可以用 hexo g缩写 ，hexo deploy部署文章，可以用hexo d缩写 注意deploy时可能要你输入username和password。 8. 写文章和发布文章首先在博客根目录下右键打开git bash here，安装一个扩展npm i hexo-deployer-git。 npm i hexo-deployer-git 然后输入hexo new post \"article title\"，新建一篇文章。 hexo new post \"article title\" 然后打开E:\\MyBlog\\source\\_posts的目录，可以发现下面多了一个文件夹和一个.md文件，一个用来存放你的图片等数据，另一个就是你的文章文件。 另外推荐直接使用有道云编写markdown文章，不仅可以实时预览，还可以快捷的生成markdown语法格式，具体效果如下图所示。 编写完markdown文件后，根目录下输入hexo g生成静态网页，然后输入hexo s可以本地预览效果，最后输入hexo d上传到github上。这时打开你的github.io主页就能看到发布的文章了。 到此为止，Hexo初级搭建就已经完成了。 0x004 Hexo 优化定制 1. Hexo相关目录文件1.1 博客目录构成介绍node_modules是node.js各种库的目录，public是生成的网页文件目录，scaffolds里面就三个文件，存储着新文章和新页面的初始设置，source是我们最常用到的一个目录，里面存放着文章、各类页面、图像等文件，themes存放着主题文件，一般也用不到。 我们平时写文章只需要关注source/_posts这个文件夹就行了。 - node_modules - public - scaffolds - source - _data - _posts - about - archives - categories - friends - tags - themes 1.2 hexo基本配置在文件根目录下的_config.yml，就是整个hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的配置描述。 1.2.1 网站参数描述title网站标题subtitle网站副标题description网站描述author您的名字language网站使用的语言timezone网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。 其中，description主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author参数用于主题显示文章的作者。 1.2.2 网址参数描述url网址root网站根目录 permalink文章的永久链接格式permalink_defaults永久链接中各部分的默认值 在这里，你需要把url改成你的网站域名。 permalink，也就是你生成某个文章时的那个链接格式。 比如我新建一个文章叫temp.md，那么这个时候他自动生成的地址就是http://yoursite.com/2018/09/05/temp。 以下是官方给出的示例，关于链接的变量还有很多，需要的可以去官网上查找永久链接 。 参数结果 :year/:month/:day/:title /2019/08/10/hello-world :year-:month-:day-:title.html 2019-08-10-hello-world.html :category/:titlefoo /bar/hello-world 2. 定制主题这里推荐作者洪卫的hexo-blog-fly博客主题，该主题是基于hexo-theme-matery优化的，需要把博客相关信息换成您自己的就可以部署了，极大简化了构建博客的工作量和复杂度。 2.1 简单使用方法 安装Git, 安装nodeJS，安装Hexo 你可以直接fork一份源码到你的仓库，clone到本地博客文件夹内 在本地博客仓库运行npm i命令安装依赖包 直接修改配置信息，改成自己的信息 运行命令hexo clean（清除生成文件），hexo g（生成网页）， hexo s（本地预览），hexo d（部署） 2.2 原主题特性: 简单漂亮，文章内容美观易读 Material Design 设计 响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现 首页轮播文章及每天动态切换 Banner 图片 瀑布流式的博客文章列表（文章无特色图片时会有 24 张漂亮的图片代替） 时间轴式的归档页 词云的标签页和雷达图的分类页 丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等） 可自定义的数据的友情链接页面 支持文章置顶和文章打赏 支持 MathJax TOC 目录 可设置复制文章内容时追加版权信息 可设置阅读文章时做密码验证 Gitalk、Gitment、Valine 和 Disqus 评论模块（推荐使用 Gitalk） 集成了不蒜子统计、谷歌分析（Google Analytics）和文章字数统计等功能 支持在首页的音乐播放和视频播放功能 2.3 新增加特性: 修改了原主题的一些很多bug 加入图片懒加载功能，在根目录配置文件开启和关闭 增加留言板功能 在关于板块,加入简历功能页 增加视听[视觉听觉影音]板块 支持emoji表情，用markdown emoji语法书写直接生成对应的能跳跃的表情。 增加网站运行时间显示 增加动漫模型 整体替换Banner图片和文章特色图片 增加分类相册功能 修改了一些控件的参数 修改部分样式,比如: 文章卡片,固定高度,使其不至于因为文章摘要的长短不同导致卡片大小不一使页面布局很不美观,类似的还有友链卡片,优化了页面内容布局,视觉更整齐美观 解决首页文章列表卡片上方 border-radius圆角失效的bug 添加页面樱花飘落动效 添加鼠标点击烟花爆炸动效 加入天气接口控件 加入鼠标点击文字特效 添加页面雪花飘落动效 添加在线聊天插件 调整线聊天插件参数，使之能够随着鼠标滑动位置自适应调整 持续更新… 2.4 切换主题如果想自己动手对hexo-theme-matery优化的话，可以修改Hexo根目录下的 _config.yml的 theme 的值 theme: hexo-theme-matery _config.yml 文件的其它修改建议: 请修改 _config.yml 的 url 的值为你的网站主 URL（如：http://xxx.github.io）。 建议修改两个 per_page 的分页条数值为 6 的倍数，如：12、18 等，这样文章列表在各个屏幕下都能较好的显示。 如果你是中文用户，则建议修改 language 的值为 zh-CN。 2.5 新建分类 categories 页categories 页是用来展示所有分类的页面，如果在你的博客 source 目录下还没有 categories/index.md 文件，那么你就需要新建一个，命令如下： hexo new page \"categories\" 编辑你刚刚新建的页面文件 /source/categories/index.md，至少需要以下内容： --- title: categories date: 2018-09-30 17:25:30 type: \"categories\" layout: \"categories\" --- 2.6 新建标签 tags 页tags 页是用来展示所有标签的页面，如果在你的博客 source 目录下还没有 tags/index.md 文件，那么你就需要新建一个，命令如下： hexo new page \"tags\" 编辑你刚刚新建的页面文件 /source/tags/index.md，至少需要以下内容： --- title: tags date: 2018-09-30 18:23:38 type: \"tags\" layout: \"tags\" --- 2.7 新建关于我 about 页about 页是用来展示关于我和我的博客信息的页面，如果在你的博客 source 目录下还没有 about/index.md 文件，那么你就需要新建一个，命令如下： hexo new page \"about\" 编辑你刚刚新建的页面文件 /source/about/index.md，至少需要以下内容： --- title: about date: 2018-09-30 17:25:30 type: \"about\" layout: \"about\" --- 2.8 新建留言板 contact 页（可选的）contact 页是用来展示留言板信息的页面，前提是已经开启了第三方评论系统才能显示。如果在你的博客 source 目录下还没有 contact/index.md 文件，那么你就需要新建一个，命令如下： hexo new page \"contact\" 编辑你刚刚新建的页面文件 /source/contact/index.md，至少需要以下内容： --- title: contact date: 2018-09-30 17:25:30 type: \"contact\" layout: \"contact\" --- 2.9 新建友情链接 friends 页（可选的）friends 页是用来展示友情链接信息的页面，如果在你的博客 source 目录下还没有 friends/index.md 文件，那么你就需要新建一个，命令如下： hexo new page \"friends\" 编辑你刚刚新建的页面文件 /source/friends/index.md，至少需要以下内容： --- title: friends date: 2018-12-12 21:25:30 type: \"friends\" layout: \"friends\" --- 同时，在你的博客 source 目录下新建 _data 目录，在 _data 目录中新建 friends.json 文件，文件内容如下所示： [{ \"avatar\": \"http://image.luokangyuan.com/1_qq_27922023.jpg\", \"name\": \"码酱\", \"introduction\": \"我不是大佬，只是在追寻大佬的脚步\", \"url\": \"http://luokangyuan.com/\", \"title\": \"前去学习\" }, { \"avatar\": \"http://image.luokangyuan.com/4027734.jpeg\", \"name\": \"闪烁之狐\", \"introduction\": \"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬\", \"url\": \"https://blinkfox.github.io/\", \"title\": \"前去学习\" }, { \"avatar\": \"http://image.luokangyuan.com/avatar.jpg\", \"name\": \"ja_rome\", \"introduction\": \"平凡的脚步也可以走出伟大的行程\", \"url\": \"https://me.csdn.net/jlh912008548\", \"title\": \"前去学习\" }] 2.10 一级菜单导航配置配置基本菜单导航的名称、路径url和图标icon 菜单导航名称可以是中文也可以是英文(如：Index或主页) 图标icon 可以在Font Awesome 中查找 menu: Index: url: / icon: fas fa-home Tags: url: /tags icon: fas fa-tags Categories: url: /categories icon: fas fa-bookmark Archives: url: /archives icon: fas fa-archive About: url: /about icon: fas fa-user-circle Friends: url: /friends icon: fas fa-address-book 2.11 二级菜单配置方法如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作 在需要添加二级菜单的一级菜单下添加children关键字(如:About菜单下添加children) 在children下创建二级菜单的 名称name,路径url和图标icon. 注意每个二级菜单模块前要加 -. 注意缩进格式 menu: Index: url: / icon: fas fa-home Tags: url: /tags icon: fas fa-tags Categories: url: /categories icon: fas fa-bookmark Archives: url: /archives icon: fas fa-archive About: url: /about icon: fas fa-user-circle-o Friends: url: /friends icon: fas fa-address-book Medias: icon: fas fa-list children: - name: Musics url: /musics icon: fas fa-music - name: Movies url: /movies icon: fas fa-film - name: Books url: /books icon: fas fa-book - name: Galleries url: /galleries icon: fas fa-image 执行 hexo clean &amp;&amp; hexo g 重新生成博客文件。 2.12 代码高亮由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 hexo-prism-plugin 的 Hexo 插件来做代码高亮，安装命令如下： npm i -S hexo-prism-plugin 然后，修改 Hexo 根目录下 _config.yml 文件中 highlight.enable 的值为 false，并新增 prism 插件相关的配置，主要配置如下： highlight: enable: false prism_plugin: mode: 'preprocess' # realtime/preprocess theme: 'tomorrow' line_number: false # default false custom_css: 更多代码块优化详细内容请访问：http://luckyzmj.cn/posts/1b9a9e28.html 2.13 搜索本主题中还使用到了 hexo-generator-search 的 Hexo 插件来做内容搜索，安装命令如下： npm install hexo-generator-search --save 在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项： search: path: search.xml field: post 2.14 文章字数统计插件（建议安装）如果你想要在文章中显示文章字数、阅读时长信息，可以安装 hexo-wordcount 插件。 安装命令如下： npm i --save hexo-wordcount 然后只需在本主题下的 _config.yml 文件中，将各个文章字数相关的配置激活即可： postInfo: date: true update: false wordCount: false # 设置文章字数统计为 true. totalCount: false # 设置站点文章总字数统计为 true. min2read: false # 阅读时长. readCount: false # 阅读次数. 2.15 添加emoji表情支持（可选的）本主题新增了对emoji表情的支持，使用到了 hexo-filter-github-emojis 的 Hexo 插件来支持 emoji表情的生成，把对应的markdown emoji语法（::,例如：:smile:）转变成会跳跃的emoji表情，安装命令如下： npm install hexo-filter-github-emojis --save 在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项： githubEmojis: enable: true className: github-emoji inject: true styles: customEmojis: 2.16 添加 RSS 订阅支持（可选的）本主题中还使用到了hexo-generator-feed 的 Hexo 插件来做 RSS，安装命令如下： npm install hexo-generator-feed --save 在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项： feed: type: atom path: atom.xml limit: 20 hub: content: content_limit: 140 content_limit_delim: ' ' order_by: -date 执行 hexo clean &amp;&amp; hexo g 重新生成博客文件，然后在 public 文件夹中即可看到 atom.xml 文件，说明你已经安装成功了。 2.17 添加 DaoVoice 在线聊天功能（可选的）前往 DaoVoice 官网注册并且获取 app_id，并将 app_id 填入主题的 _config.yml 文件中。 2.18 添加 Tidio 在线聊天功能（可选的）前往 Tidio 官网注册并且获取 Public Key，并将 Public Key 填入主题的 _config.yml 文件中。 2.19 修改页脚页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 /layout/_partial/footer.ejs 文件中，包括站点、使用的主题、访问量等。 2.20 修改社交链接在主题的 _config.yml 文件中，默认支持 QQ、GitHub 和邮箱等的配置，你可以在主题文件的 /layout/_partial/social-link.ejs 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码： &lt;% if (theme.socialLink.github) { %&gt; &lt;a href=\"&lt;%= theme.socialLink.github %&gt;\" class=\"tooltipped\" target=\"_blank\" data-tooltip=\"访问我的GitHub\" data-position=\"top\" data-delay=\"50\"&gt; &lt;i class=\"fab fa-github\"&gt;&lt;/i&gt; &lt;/a&gt; &lt;% } %&gt; 其中，社交图标（如：fa-github）你可以在 Font Awesome 中搜索找到。以下是常用社交图标的标识，供你参考： Facebook: fab fa-facebook Twitter: fab fa-twitter Google-plus: fab fa-google-plus Linkedin: fab fa-linkedin Tumblr: fab fa-tumblr Medium: fab fa-medium Slack: fab fa-slack Sina Weibo: fab fa-weibo Wechat: fab fa-weixin QQ: fab fa-qq Zhihu: fab fa-zhihu 注意: 本主题中使用的 Font Awesome 版本为 5.11.0。 2.21 修改打赏的二维码图片在主题文件的 source/medias/reward 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。 2.22 配置音乐播放器（可选的）要支持音乐播放，在主题的 _config.yml 配置文件中激活music配置即可 # 是否在首页显示音乐 music: enable: true title: #非吸底模式有效 enable: true show: 听听音乐 server: netease #require music platform: netease, tencent, kugou, xiami, baidu type: playlist #require song, playlist, album, search, artist id: 503838841 #require song id / playlist id / album id / search keyword fixed: false # 开启吸底模式 autoplay: false # 是否自动播放 theme: '#42b983' loop: 'all' # 音频循环播放, 可选值: 'all', 'one', 'none' order: 'random' # 音频循环顺序, 可选值: 'list', 'random' preload: 'auto' # 预加载，可选值: 'none', 'metadata', 'auto' volume: 0.7 # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效 listFolded: true # 列表默认折叠 提示： server可选netease（网易云音乐），tencent（QQ音乐），kugou（酷狗音乐），xiami（虾米音乐），baidu（百度音乐）。 type可选song（歌曲），playlist（歌单），album（专辑），search（搜索关键字），artist（歌手） id获取示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，地址栏有一串数字，playlist的id即为这串数字。 2.23文章 Front-matter 介绍Front-matter 选项中的所有内容均为非必填的。但我仍然建议至少填写 title 和 date 的值。 配置选项 默认值 描述 title Markdown 的文件标题 文章标题，强烈建议填写此选项 date 文件创建时的日期时间 发布时间，强烈建议填写此选项，且最好保证全局唯一 author 根 _config.yml 中的 author 文章作者 img featureImages 中的某个值 文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: http://xxx.com/xxx.jpg top true 推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章 cover false v1.0.2版本新增，表示该文章是否需要加入到首页轮播封面中 coverImg 无 v1.0.2版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片 password 无 文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项 toc true 是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 config.yml 中激活了 toc 选项 mathjax false 是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行 summary 无 文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要 categories 无 文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类 tags 无 文章标签，一篇文章可以多个标签 keywords 文章标题 文章关键字，SEO 时需要 reprintPolicy cc_by 文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个 注意: 如果 img 属性不填写的话，文章特色图会根据文章标题的 hashcode 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图各有特色。 date 的值尽量保证每篇文章是唯一的，因为本主题中 Gitalk 和 Gitment 识别 id 是通过 date 的值来作为唯一标识的。 如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 _config.yml 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：开源中国在线工具、chahuo、站长工具。 您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则 以下为文章的 Front-matter 示例。最简示例 --- title: typora-vue-theme主题介绍 date: 2018-09-07 09:25:00 --- 最全示例 --- title: theme主题介绍 date: 2018-09-07 09:25:00 author: 赵奇 img: /source/images/xxx.jpg top: true cover: true coverImg: /images/1.jpg password: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92 toc: false mathjax: false summary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要 categories: Markdown tags: - Typora - Markdown --- 2.24 自定制修改在本主题的 _config.yml 中可以修改部分自定义信息，有以下几个部分： 菜单 我的梦想 首页的音乐播放器和视频播放器配置 是否显示推荐文章名称和按钮配置 favicon 和 Logo 个人信息 TOC 目录 文章打赏信息 复制文章内容时追加版权信息 MathJax 文章字数统计、阅读时长 点击页面的’爱心’效果 我的项目 我的技能 我的相册 Gitalk、Gitment、Valine 和 disqus 评论配置 不蒜子统计和谷歌分析（Google Analytics） 默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 hashcode 值取余，来选择展示对应的特色图 我认为个人博客应该都有自己的风格和特色。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 _config.yml 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：修改主题颜色 在主题文件的 /source/css/matery.css 文件中，搜索 .bg-color 来修改背景颜色： /* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */ .bg-color { background-image: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%); } @-webkit-keyframes rainbow { /* 动态切换背景颜色. */ } @keyframes rainbow { /* 动态切换背景颜色. */ } body { /* background-color: #eaeaea; */ /* 增加背景壁纸*/ background: url(\"https://ae01.alicdn.com/kf/H18a4b998752a4ae68b8e85d432a5aef0l.png\"), url(\"http://luckyzmj.cn/img/yun.jpg\") 0px 0px; background-attachment: fixed; margin: 0; color: #34495e; } 2.25 修改 banner 图和文章特色图你可以直接在 /source/medias/banner 文件夹中更换你喜欢的 banner 图片，主题代码中是每天动态切换一张，只需 7 张即可。如果你会 JavaScript 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，banner 切换的代码位置在 /layout/_partial/bg-cover-content.ejs 文件的 &lt;script&gt;&lt;/script&gt; 代码中： $('.bg-cover').css('background-image', 'url(/medias/banner/' + new Date().getDay() + '.jpg)'); 在 /source/medias/featureimages 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 _config.yml 做同步修改。 2.26 优化目录栏在 themes\\Matery\\layout\\_partial\\post-detail-toc.ejs，修改内容如下： .toc-widget { padding-left: 20px; width: 345px; background-color: rgb(255, 255, 255,0.7); border-radius: 10px; box-shadow: 0 10px 35px 2px rgba(0, 0, 0, .15), 0 5px 15px rgba(0, 0, 0, .07), 0 2px 5px -5px rgba(0, 0, 0, .1) !important; } #toc-content { margin-bottom: 20px; } 0x005 更多详细教程以下几篇文章都是基于Hexo框架和hexo-theme-matery主题优化的教程，大家如果遇到问题，可以参考其中的方法。 Hexo+Github博客搭建完全教程 hexo-theme-matery作者教程 Hexo+github搭建博客(超级详细版，精细入微) hexo（matery）背景、滚动条优化+增加点击跳评论","categories":[{"name":"Luckey博客篇","slug":"Luckey博客篇","permalink":"http://www.tianzd.cn/categories/Luckey%E5%8D%9A%E5%AE%A2%E7%AF%87/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://www.tianzd.cn/tags/Hexo/"},{"name":"转载","slug":"转载","permalink":"http://www.tianzd.cn/tags/%E8%BD%AC%E8%BD%BD/"},{"name":"博客","slug":"博客","permalink":"http://www.tianzd.cn/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"Github","slug":"Github","permalink":"http://www.tianzd.cn/tags/Github/"}],"author":"Luckey"}],"categories":[{"name":"C++","slug":"C","permalink":"http://www.tianzd.cn/categories/C/"},{"name":"python","slug":"python","permalink":"http://www.tianzd.cn/categories/python/"},{"name":"通信","slug":"通信","permalink":"http://www.tianzd.cn/categories/%E9%80%9A%E4%BF%A1/"},{"name":"折腾","slug":"折腾","permalink":"http://www.tianzd.cn/categories/%E6%8A%98%E8%85%BE/"},{"name":"效率","slug":"效率","permalink":"http://www.tianzd.cn/categories/%E6%95%88%E7%8E%87/"},{"name":"Luckey博客篇","slug":"Luckey博客篇","permalink":"http://www.tianzd.cn/categories/Luckey%E5%8D%9A%E5%AE%A2%E7%AF%87/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://www.tianzd.cn/tags/C/"},{"name":"DLL","slug":"DLL","permalink":"http://www.tianzd.cn/tags/DLL/"},{"name":"python","slug":"python","permalink":"http://www.tianzd.cn/tags/python/"},{"name":"conda","slug":"conda","permalink":"http://www.tianzd.cn/tags/conda/"},{"name":"数据格式","slug":"数据格式","permalink":"http://www.tianzd.cn/tags/%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F/"},{"name":"modbus","slug":"modbus","permalink":"http://www.tianzd.cn/tags/modbus/"},{"name":"frp","slug":"frp","permalink":"http://www.tianzd.cn/tags/frp/"},{"name":"内网穿透","slug":"内网穿透","permalink":"http://www.tianzd.cn/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"},{"name":"博客搭建教程","slug":"博客搭建教程","permalink":"http://www.tianzd.cn/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"},{"name":"Docsify","slug":"Docsify","permalink":"http://www.tianzd.cn/tags/Docsify/"},{"name":"markdown","slug":"markdown","permalink":"http://www.tianzd.cn/tags/markdown/"},{"name":"效率","slug":"效率","permalink":"http://www.tianzd.cn/tags/%E6%95%88%E7%8E%87/"},{"name":"转载","slug":"转载","permalink":"http://www.tianzd.cn/tags/%E8%BD%AC%E8%BD%BD/"},{"name":"hexo-blog-lucky","slug":"hexo-blog-lucky","permalink":"http://www.tianzd.cn/tags/hexo-blog-lucky/"},{"name":"Hexo","slug":"Hexo","permalink":"http://www.tianzd.cn/tags/Hexo/"},{"name":"渲染绕过","slug":"渲染绕过","permalink":"http://www.tianzd.cn/tags/%E6%B8%B2%E6%9F%93%E7%BB%95%E8%BF%87/"},{"name":"阿里云","slug":"阿里云","permalink":"http://www.tianzd.cn/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"},{"name":"博客","slug":"博客","permalink":"http://www.tianzd.cn/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"Github","slug":"Github","permalink":"http://www.tianzd.cn/tags/Github/"}]}